{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Workflow Configuration JSON Schema",
  "version": "0.0.85",
  "$defs": {
    "AWSBatchArgs": {
      "description": "AWS Batch arguments.",
      "properties": {
        "job_queue_arn": {
          "description": "AWS Batch job queue ARN",
          "title": "Job Queue Arn",
          "type": "string"
        },
        "s3_bucket": {
          "description": "S3 bucket for file storage",
          "title": "S3 Bucket",
          "type": "string"
        },
        "region_name": {
          "default": "us-east-1",
          "description": "AWS region",
          "title": "Region Name",
          "type": "string"
        },
        "aws_access_key_id": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "AWS access key ID",
          "title": "Aws Access Key Id"
        },
        "aws_secret_access_key": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "AWS secret access key",
          "title": "Aws Secret Access Key"
        },
        "aws_session_token": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "AWS session token",
          "title": "Aws Session Token"
        }
      },
      "required": [
        "job_queue_arn",
        "s3_bucket"
      ],
      "title": "AWSBatchArgs",
      "type": "object"
    },
    "ArrayParam": {
      "description": "Array parameter.\n\nThis class provides list/array parameter validation and processing with support\nfor converting various sequence types to lists.",
      "properties": {
        "desc": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "A description of this parameter provide to the workflow model.",
          "title": "Desc"
        },
        "required": {
          "default": false,
          "description": "A require flag for the default-able parameter value.",
          "title": "Required",
          "type": "boolean"
        },
        "type": {
          "const": "array",
          "default": "array",
          "title": "Type",
          "type": "string"
        },
        "default": {
          "type": "array",
          "items": {},
          "description": "A default list that make from the list built-in func.",
          "title": "Default"
        }
      },
      "title": "ArrayParam",
      "type": "object"
    },
    "BashStage": {
      "description": "Bash stage executor that execute bash script on the current OS.\nIf your current OS is Windows, it will run on the bash from the current WSL.\nIt will use `bash` for Windows OS and use `sh` for Linux OS.\n\n    This stage has some limitation when it runs shell statement with the\nbuilt-in subprocess package. It does not good enough to use multiline\nstatement. Thus, it will write the `.sh` file before start running bash\ncommand for fix this issue.\n\nExamples:\n    >>> stage = BaseStage.model_validate({\n    ...     \"id\": \"bash-stage\",\n    ...     \"name\": \"The Shell stage execution\",\n    ...     \"bash\": 'echo \"Hello $FOO\"',\n    ...     \"env\": {\n    ...         \"FOO\": \"BAR\",\n    ...     },\n    ... })",
      "properties": {
        "extras": {
          "additionalProperties": true,
          "description": "An extra parameter that override core config values.",
          "title": "Extras",
          "type": "object"
        },
        "id": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "A stage ID that use to keep execution output or getting by job owner.",
          "title": "Id"
        },
        "name": {
          "description": "A stage name that want to logging when start execution.",
          "title": "Name",
          "type": "string"
        },
        "desc": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "A stage description that use to logging when start execution.",
          "title": "Desc"
        },
        "if": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "boolean"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "A stage condition statement to allow stage executable. This field alise with `if` field.",
          "title": "If"
        },
        "retry": {
          "default": 0,
          "description": "A retry number if stage process got the error exclude skip and cancel exception class.",
          "exclusiveMaximum": 20,
          "minimum": 0,
          "title": "Retry",
          "type": "integer"
        },
        "bash": {
          "description": "A bash statement that want to execute via Python subprocess.",
          "title": "Bash",
          "type": "string"
        },
        "env": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "An environment variables that set before run bash command. It will add on the header of the `.sh` file.",
          "title": "Env",
          "type": "object"
        }
      },
      "required": [
        "name",
        "bash"
      ],
      "title": "BashStage",
      "type": "object"
    },
    "CallStage": {
      "description": "Call stage executor that call the Python function from registry with tag\ndecorator function in `reusables` module and run it with input arguments.\n\n    This stage is different with PyStage because the PyStage is just run\na Python statement with the `exec` function and pass the current locals and\nglobals before exec that statement. This stage will import the caller\nfunction can call it with an input arguments. So, you can create your\nfunction complexly that you can for your objective to invoked by this stage\nobject.\n\n    This stage is the most powerful stage of this package for run every\nuse-case by a custom requirement that you want by creating the Python\nfunction and adding it to the caller registry value by importer syntax like\n`module.caller.registry` not path style like `module/caller/registry`.\n\nWarning:\n\n    The caller registry to get a caller function should importable by the\ncurrent Python execution pointer.\n\nExamples:\n    >>> stage = CallStage.model_validate({\n    ...     \"id\": \"call-stage\",\n    ...     \"name\": \"Task stage execution\",\n    ...     \"uses\": \"tasks/function-name@tag-name\",\n    ...     \"args\": {\"arg01\": \"BAR\", \"kwarg01\": 10},\n    ... })",
      "properties": {
        "extras": {
          "additionalProperties": true,
          "description": "An extra parameter that override core config values.",
          "title": "Extras",
          "type": "object"
        },
        "id": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "A stage ID that use to keep execution output or getting by job owner.",
          "title": "Id"
        },
        "name": {
          "description": "A stage name that want to logging when start execution.",
          "title": "Name",
          "type": "string"
        },
        "desc": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "A stage description that use to logging when start execution.",
          "title": "Desc"
        },
        "if": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "boolean"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "A stage condition statement to allow stage executable. This field alise with `if` field.",
          "title": "If"
        },
        "retry": {
          "default": 0,
          "description": "A retry number if stage process got the error exclude skip and cancel exception class.",
          "exclusiveMaximum": 20,
          "minimum": 0,
          "title": "Retry",
          "type": "integer"
        },
        "uses": {
          "description": "A caller function with registry importer syntax that use to load function before execute step. The caller registry syntax should be `<import.part>/<func-name>@<tag-name>`.",
          "title": "Uses",
          "type": "string"
        },
        "with": {
          "additionalProperties": true,
          "description": "An argument parameter that will pass to this caller function.",
          "title": "With",
          "type": "object"
        }
      },
      "required": [
        "name",
        "uses"
      ],
      "title": "CallStage",
      "type": "object"
    },
    "CaseStage": {
      "description": "Case stage executor that execute all stages if the condition was matched.\n\nExamples:\n    >>> stage = CaseStage.model_validate({\n    ...     \"id\": \"case-stage\",\n    ...     \"name\": \"If stage execution.\",\n    ...     \"case\": \"${{ param.test }}\",\n    ...     \"match\": [\n    ...         {\n    ...             \"case\": \"1\",\n    ...             \"stages\": [\n    ...                 {\n    ...                     \"name\": \"Stage case 1\",\n    ...                     \"eche\": \"Hello case 1\",\n    ...                 },\n    ...             ],\n    ...         },\n    ...         {\n    ...             \"case\": \"_\",\n    ...             \"stages\": [\n    ...                 {\n    ...                     \"name\": \"Stage else\",\n    ...                     \"eche\": \"Hello case else\",\n    ...                 },\n    ...             ],\n    ...         },\n    ...     ],\n    ... })\n\n    >>> stage = CaseStage.model_validate({\n    ...     \"id\": \"case-stage\",\n    ...     \"name\": \"If stage execution.\",\n    ...     \"case\": \"${{ param.test }}\",\n    ...     \"match\": [\n    ...         {\n    ...             \"case\": \"1\",\n    ...             \"stages\": [\n    ...                 {\n    ...                     \"name\": \"Stage case 1\",\n    ...                     \"eche\": \"Hello case 1\",\n    ...                 },\n    ...             ],\n    ...         },\n    ...         {\n    ...             \"else\": [\n    ...                 {\n    ...                     \"name\": \"Stage else\",\n    ...                     \"eche\": \"Hello case else\",\n    ...                 },\n    ...             ],\n    ...         },\n    ...     ],\n    ... })",
      "properties": {
        "extras": {
          "additionalProperties": true,
          "description": "An extra parameter that override core config values.",
          "title": "Extras",
          "type": "object"
        },
        "id": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "A stage ID that use to keep execution output or getting by job owner.",
          "title": "Id"
        },
        "name": {
          "description": "A stage name that want to logging when start execution.",
          "title": "Name",
          "type": "string"
        },
        "desc": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "A stage description that use to logging when start execution.",
          "title": "Desc"
        },
        "if": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "boolean"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "A stage condition statement to allow stage executable. This field alise with `if` field.",
          "title": "If"
        },
        "case": {
          "description": "A case condition for routing.",
          "title": "Case",
          "type": "string"
        },
        "match": {
          "description": "A list of Match model that should not be an empty list.",
          "items": {
            "anyOf": [
              {
                "$ref": "#/$defs/Match"
              },
              {
                "$ref": "#/$defs/Else"
              }
            ]
          },
          "title": "Match",
          "type": "array"
        },
        "skip-not-match": {
          "default": false,
          "description": "A flag for making skip if it does not match and else condition does not set too.",
          "title": "Skip-Not-Match",
          "type": "boolean"
        }
      },
      "required": [
        "name",
        "case",
        "match"
      ],
      "title": "CaseStage",
      "type": "object"
    },
    "ChoiceParam": {
      "description": "Choice parameter.\n\nThis class provides choice parameter validation and processing with support\nfor predefined options. If no value is provided, it returns the first option.",
      "properties": {
        "desc": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "A description of this parameter provide to the workflow model.",
          "title": "Desc"
        },
        "required": {
          "default": true,
          "description": "A require flag that force to pass this parameter value.",
          "title": "Required",
          "type": "boolean"
        },
        "type": {
          "const": "choice",
          "default": "choice",
          "title": "Type",
          "type": "string"
        },
        "options": {
          "anyOf": [
            {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            {
              "items": {
                "type": "integer"
              },
              "type": "array"
            }
          ],
          "description": "A list of choice parameters that able be str or int.",
          "title": "Options"
        }
      },
      "required": [
        "options"
      ],
      "title": "ChoiceParam",
      "type": "object"
    },
    "ContainerArgs": {
      "description": "Container arguments.",
      "properties": {
        "image": {
          "description": "Docker image to use",
          "title": "Image",
          "type": "string"
        },
        "container_name": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Container name",
          "title": "Container Name"
        },
        "volumes": {
          "anyOf": [
            {
              "items": {
                "additionalProperties": {
                  "type": "string"
                },
                "type": "object"
              },
              "type": "array"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Volume mounts",
          "title": "Volumes"
        },
        "environment": {
          "anyOf": [
            {
              "additionalProperties": {
                "type": "string"
              },
              "type": "object"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Environment variables",
          "title": "Environment"
        },
        "network": {
          "anyOf": [
            {
              "additionalProperties": true,
              "type": "object"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Network configuration",
          "title": "Network"
        },
        "resources": {
          "anyOf": [
            {
              "additionalProperties": true,
              "type": "object"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Resource limits",
          "title": "Resources"
        },
        "working_dir": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": "/app",
          "description": "Working directory",
          "title": "Working Dir"
        },
        "user": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "User to run as",
          "title": "User"
        },
        "command": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Override default command",
          "title": "Command"
        },
        "timeout": {
          "default": 3600,
          "description": "Execution timeout in seconds",
          "title": "Timeout",
          "type": "integer"
        },
        "remove": {
          "default": true,
          "description": "Remove container after execution",
          "title": "Remove",
          "type": "boolean"
        },
        "docker_host": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Docker host URL",
          "title": "Docker Host"
        }
      },
      "required": [
        "image"
      ],
      "title": "ContainerArgs",
      "type": "object"
    },
    "Crontab": {
      "description": "Cron event model wrapping CronJob functionality.\n\nA Pydantic model that encapsulates crontab scheduling functionality with\nvalidation and datetime generation capabilities.\n\nAttributes:\n    cronjob: CronJob instance for schedule validation and datetime generation.\n    tz: Timezone string value (alias: timezone).",
      "properties": {
        "extras": {
          "additionalProperties": true,
          "description": "An extras parameters that want to pass to the CronJob field.",
          "title": "Extras",
          "type": "object"
        },
        "timezone": {
          "default": "UTC",
          "description": "A timezone string value that will pass to ZoneInfo.",
          "enum": [
            "Africa/Abidjan",
            "Africa/Accra",
            "Africa/Addis_Ababa",
            "Africa/Algiers",
            "Africa/Asmara",
            "Africa/Asmera",
            "Africa/Bamako",
            "Africa/Bangui",
            "Africa/Banjul",
            "Africa/Bissau",
            "Africa/Blantyre",
            "Africa/Brazzaville",
            "Africa/Bujumbura",
            "Africa/Cairo",
            "Africa/Casablanca",
            "Africa/Ceuta",
            "Africa/Conakry",
            "Africa/Dakar",
            "Africa/Dar_es_Salaam",
            "Africa/Djibouti",
            "Africa/Douala",
            "Africa/El_Aaiun",
            "Africa/Freetown",
            "Africa/Gaborone",
            "Africa/Harare",
            "Africa/Johannesburg",
            "Africa/Juba",
            "Africa/Kampala",
            "Africa/Khartoum",
            "Africa/Kigali",
            "Africa/Kinshasa",
            "Africa/Lagos",
            "Africa/Libreville",
            "Africa/Lome",
            "Africa/Luanda",
            "Africa/Lubumbashi",
            "Africa/Lusaka",
            "Africa/Malabo",
            "Africa/Maputo",
            "Africa/Maseru",
            "Africa/Mbabane",
            "Africa/Mogadishu",
            "Africa/Monrovia",
            "Africa/Nairobi",
            "Africa/Ndjamena",
            "Africa/Niamey",
            "Africa/Nouakchott",
            "Africa/Ouagadougou",
            "Africa/Porto-Novo",
            "Africa/Sao_Tome",
            "Africa/Timbuktu",
            "Africa/Tripoli",
            "Africa/Tunis",
            "Africa/Windhoek",
            "America/Adak",
            "America/Anchorage",
            "America/Anguilla",
            "America/Antigua",
            "America/Araguaina",
            "America/Argentina/Buenos_Aires",
            "America/Argentina/Catamarca",
            "America/Argentina/ComodRivadavia",
            "America/Argentina/Cordoba",
            "America/Argentina/Jujuy",
            "America/Argentina/La_Rioja",
            "America/Argentina/Mendoza",
            "America/Argentina/Rio_Gallegos",
            "America/Argentina/Salta",
            "America/Argentina/San_Juan",
            "America/Argentina/San_Luis",
            "America/Argentina/Tucuman",
            "America/Argentina/Ushuaia",
            "America/Aruba",
            "America/Asuncion",
            "America/Atikokan",
            "America/Atka",
            "America/Bahia",
            "America/Bahia_Banderas",
            "America/Barbados",
            "America/Belem",
            "America/Belize",
            "America/Blanc-Sablon",
            "America/Boa_Vista",
            "America/Bogota",
            "America/Boise",
            "America/Buenos_Aires",
            "America/Cambridge_Bay",
            "America/Campo_Grande",
            "America/Cancun",
            "America/Caracas",
            "America/Catamarca",
            "America/Cayenne",
            "America/Cayman",
            "America/Chicago",
            "America/Chihuahua",
            "America/Ciudad_Juarez",
            "America/Coral_Harbour",
            "America/Cordoba",
            "America/Costa_Rica",
            "America/Coyhaique",
            "America/Creston",
            "America/Cuiaba",
            "America/Curacao",
            "America/Danmarkshavn",
            "America/Dawson",
            "America/Dawson_Creek",
            "America/Denver",
            "America/Detroit",
            "America/Dominica",
            "America/Edmonton",
            "America/Eirunepe",
            "America/El_Salvador",
            "America/Ensenada",
            "America/Fort_Nelson",
            "America/Fort_Wayne",
            "America/Fortaleza",
            "America/Glace_Bay",
            "America/Godthab",
            "America/Goose_Bay",
            "America/Grand_Turk",
            "America/Grenada",
            "America/Guadeloupe",
            "America/Guatemala",
            "America/Guayaquil",
            "America/Guyana",
            "America/Halifax",
            "America/Havana",
            "America/Hermosillo",
            "America/Indiana/Indianapolis",
            "America/Indiana/Knox",
            "America/Indiana/Marengo",
            "America/Indiana/Petersburg",
            "America/Indiana/Tell_City",
            "America/Indiana/Vevay",
            "America/Indiana/Vincennes",
            "America/Indiana/Winamac",
            "America/Indianapolis",
            "America/Inuvik",
            "America/Iqaluit",
            "America/Jamaica",
            "America/Jujuy",
            "America/Juneau",
            "America/Kentucky/Louisville",
            "America/Kentucky/Monticello",
            "America/Knox_IN",
            "America/Kralendijk",
            "America/La_Paz",
            "America/Lima",
            "America/Los_Angeles",
            "America/Louisville",
            "America/Lower_Princes",
            "America/Maceio",
            "America/Managua",
            "America/Manaus",
            "America/Marigot",
            "America/Martinique",
            "America/Matamoros",
            "America/Mazatlan",
            "America/Mendoza",
            "America/Menominee",
            "America/Merida",
            "America/Metlakatla",
            "America/Mexico_City",
            "America/Miquelon",
            "America/Moncton",
            "America/Monterrey",
            "America/Montevideo",
            "America/Montreal",
            "America/Montserrat",
            "America/Nassau",
            "America/New_York",
            "America/Nipigon",
            "America/Nome",
            "America/Noronha",
            "America/North_Dakota/Beulah",
            "America/North_Dakota/Center",
            "America/North_Dakota/New_Salem",
            "America/Nuuk",
            "America/Ojinaga",
            "America/Panama",
            "America/Pangnirtung",
            "America/Paramaribo",
            "America/Phoenix",
            "America/Port-au-Prince",
            "America/Port_of_Spain",
            "America/Porto_Acre",
            "America/Porto_Velho",
            "America/Puerto_Rico",
            "America/Punta_Arenas",
            "America/Rainy_River",
            "America/Rankin_Inlet",
            "America/Recife",
            "America/Regina",
            "America/Resolute",
            "America/Rio_Branco",
            "America/Rosario",
            "America/Santa_Isabel",
            "America/Santarem",
            "America/Santiago",
            "America/Santo_Domingo",
            "America/Sao_Paulo",
            "America/Scoresbysund",
            "America/Shiprock",
            "America/Sitka",
            "America/St_Barthelemy",
            "America/St_Johns",
            "America/St_Kitts",
            "America/St_Lucia",
            "America/St_Thomas",
            "America/St_Vincent",
            "America/Swift_Current",
            "America/Tegucigalpa",
            "America/Thule",
            "America/Thunder_Bay",
            "America/Tijuana",
            "America/Toronto",
            "America/Tortola",
            "America/Vancouver",
            "America/Virgin",
            "America/Whitehorse",
            "America/Winnipeg",
            "America/Yakutat",
            "America/Yellowknife",
            "Antarctica/Casey",
            "Antarctica/Davis",
            "Antarctica/DumontDUrville",
            "Antarctica/Macquarie",
            "Antarctica/Mawson",
            "Antarctica/McMurdo",
            "Antarctica/Palmer",
            "Antarctica/Rothera",
            "Antarctica/South_Pole",
            "Antarctica/Syowa",
            "Antarctica/Troll",
            "Antarctica/Vostok",
            "Arctic/Longyearbyen",
            "Asia/Aden",
            "Asia/Almaty",
            "Asia/Amman",
            "Asia/Anadyr",
            "Asia/Aqtau",
            "Asia/Aqtobe",
            "Asia/Ashgabat",
            "Asia/Ashkhabad",
            "Asia/Atyrau",
            "Asia/Baghdad",
            "Asia/Bahrain",
            "Asia/Baku",
            "Asia/Bangkok",
            "Asia/Barnaul",
            "Asia/Beirut",
            "Asia/Bishkek",
            "Asia/Brunei",
            "Asia/Calcutta",
            "Asia/Chita",
            "Asia/Choibalsan",
            "Asia/Chongqing",
            "Asia/Chungking",
            "Asia/Colombo",
            "Asia/Dacca",
            "Asia/Damascus",
            "Asia/Dhaka",
            "Asia/Dili",
            "Asia/Dubai",
            "Asia/Dushanbe",
            "Asia/Famagusta",
            "Asia/Gaza",
            "Asia/Harbin",
            "Asia/Hebron",
            "Asia/Ho_Chi_Minh",
            "Asia/Hong_Kong",
            "Asia/Hovd",
            "Asia/Irkutsk",
            "Asia/Istanbul",
            "Asia/Jakarta",
            "Asia/Jayapura",
            "Asia/Jerusalem",
            "Asia/Kabul",
            "Asia/Kamchatka",
            "Asia/Karachi",
            "Asia/Kashgar",
            "Asia/Kathmandu",
            "Asia/Katmandu",
            "Asia/Khandyga",
            "Asia/Kolkata",
            "Asia/Krasnoyarsk",
            "Asia/Kuala_Lumpur",
            "Asia/Kuching",
            "Asia/Kuwait",
            "Asia/Macao",
            "Asia/Macau",
            "Asia/Magadan",
            "Asia/Makassar",
            "Asia/Manila",
            "Asia/Muscat",
            "Asia/Nicosia",
            "Asia/Novokuznetsk",
            "Asia/Novosibirsk",
            "Asia/Omsk",
            "Asia/Oral",
            "Asia/Phnom_Penh",
            "Asia/Pontianak",
            "Asia/Pyongyang",
            "Asia/Qatar",
            "Asia/Qostanay",
            "Asia/Qyzylorda",
            "Asia/Rangoon",
            "Asia/Riyadh",
            "Asia/Saigon",
            "Asia/Sakhalin",
            "Asia/Samarkand",
            "Asia/Seoul",
            "Asia/Shanghai",
            "Asia/Singapore",
            "Asia/Srednekolymsk",
            "Asia/Taipei",
            "Asia/Tashkent",
            "Asia/Tbilisi",
            "Asia/Tehran",
            "Asia/Tel_Aviv",
            "Asia/Thimbu",
            "Asia/Thimphu",
            "Asia/Tokyo",
            "Asia/Tomsk",
            "Asia/Ujung_Pandang",
            "Asia/Ulaanbaatar",
            "Asia/Ulan_Bator",
            "Asia/Urumqi",
            "Asia/Ust-Nera",
            "Asia/Vientiane",
            "Asia/Vladivostok",
            "Asia/Yakutsk",
            "Asia/Yangon",
            "Asia/Yekaterinburg",
            "Asia/Yerevan",
            "Atlantic/Azores",
            "Atlantic/Bermuda",
            "Atlantic/Canary",
            "Atlantic/Cape_Verde",
            "Atlantic/Faeroe",
            "Atlantic/Faroe",
            "Atlantic/Jan_Mayen",
            "Atlantic/Madeira",
            "Atlantic/Reykjavik",
            "Atlantic/South_Georgia",
            "Atlantic/St_Helena",
            "Atlantic/Stanley",
            "Australia/ACT",
            "Australia/Adelaide",
            "Australia/Brisbane",
            "Australia/Broken_Hill",
            "Australia/Canberra",
            "Australia/Currie",
            "Australia/Darwin",
            "Australia/Eucla",
            "Australia/Hobart",
            "Australia/LHI",
            "Australia/Lindeman",
            "Australia/Lord_Howe",
            "Australia/Melbourne",
            "Australia/NSW",
            "Australia/North",
            "Australia/Perth",
            "Australia/Queensland",
            "Australia/South",
            "Australia/Sydney",
            "Australia/Tasmania",
            "Australia/Victoria",
            "Australia/West",
            "Australia/Yancowinna",
            "Brazil/Acre",
            "Brazil/DeNoronha",
            "Brazil/East",
            "Brazil/West",
            "CET",
            "CST6CDT",
            "Canada/Atlantic",
            "Canada/Central",
            "Canada/Eastern",
            "Canada/Mountain",
            "Canada/Newfoundland",
            "Canada/Pacific",
            "Canada/Saskatchewan",
            "Canada/Yukon",
            "Chile/Continental",
            "Chile/EasterIsland",
            "Cuba",
            "EET",
            "EST",
            "EST5EDT",
            "Egypt",
            "Eire",
            "Etc/GMT",
            "Etc/GMT+0",
            "Etc/GMT+1",
            "Etc/GMT+10",
            "Etc/GMT+11",
            "Etc/GMT+12",
            "Etc/GMT+2",
            "Etc/GMT+3",
            "Etc/GMT+4",
            "Etc/GMT+5",
            "Etc/GMT+6",
            "Etc/GMT+7",
            "Etc/GMT+8",
            "Etc/GMT+9",
            "Etc/GMT-0",
            "Etc/GMT-1",
            "Etc/GMT-10",
            "Etc/GMT-11",
            "Etc/GMT-12",
            "Etc/GMT-13",
            "Etc/GMT-14",
            "Etc/GMT-2",
            "Etc/GMT-3",
            "Etc/GMT-4",
            "Etc/GMT-5",
            "Etc/GMT-6",
            "Etc/GMT-7",
            "Etc/GMT-8",
            "Etc/GMT-9",
            "Etc/GMT0",
            "Etc/Greenwich",
            "Etc/UCT",
            "Etc/UTC",
            "Etc/Universal",
            "Etc/Zulu",
            "Europe/Amsterdam",
            "Europe/Andorra",
            "Europe/Astrakhan",
            "Europe/Athens",
            "Europe/Belfast",
            "Europe/Belgrade",
            "Europe/Berlin",
            "Europe/Bratislava",
            "Europe/Brussels",
            "Europe/Bucharest",
            "Europe/Budapest",
            "Europe/Busingen",
            "Europe/Chisinau",
            "Europe/Copenhagen",
            "Europe/Dublin",
            "Europe/Gibraltar",
            "Europe/Guernsey",
            "Europe/Helsinki",
            "Europe/Isle_of_Man",
            "Europe/Istanbul",
            "Europe/Jersey",
            "Europe/Kaliningrad",
            "Europe/Kiev",
            "Europe/Kirov",
            "Europe/Kyiv",
            "Europe/Lisbon",
            "Europe/Ljubljana",
            "Europe/London",
            "Europe/Luxembourg",
            "Europe/Madrid",
            "Europe/Malta",
            "Europe/Mariehamn",
            "Europe/Minsk",
            "Europe/Monaco",
            "Europe/Moscow",
            "Europe/Nicosia",
            "Europe/Oslo",
            "Europe/Paris",
            "Europe/Podgorica",
            "Europe/Prague",
            "Europe/Riga",
            "Europe/Rome",
            "Europe/Samara",
            "Europe/San_Marino",
            "Europe/Sarajevo",
            "Europe/Saratov",
            "Europe/Simferopol",
            "Europe/Skopje",
            "Europe/Sofia",
            "Europe/Stockholm",
            "Europe/Tallinn",
            "Europe/Tirane",
            "Europe/Tiraspol",
            "Europe/Ulyanovsk",
            "Europe/Uzhgorod",
            "Europe/Vaduz",
            "Europe/Vatican",
            "Europe/Vienna",
            "Europe/Vilnius",
            "Europe/Volgograd",
            "Europe/Warsaw",
            "Europe/Zagreb",
            "Europe/Zaporozhye",
            "Europe/Zurich",
            "Factory",
            "GB",
            "GB-Eire",
            "GMT",
            "GMT+0",
            "GMT-0",
            "GMT0",
            "Greenwich",
            "HST",
            "Hongkong",
            "Iceland",
            "Indian/Antananarivo",
            "Indian/Chagos",
            "Indian/Christmas",
            "Indian/Cocos",
            "Indian/Comoro",
            "Indian/Kerguelen",
            "Indian/Mahe",
            "Indian/Maldives",
            "Indian/Mauritius",
            "Indian/Mayotte",
            "Indian/Reunion",
            "Iran",
            "Israel",
            "Jamaica",
            "Japan",
            "Kwajalein",
            "Libya",
            "MET",
            "MST",
            "MST7MDT",
            "Mexico/BajaNorte",
            "Mexico/BajaSur",
            "Mexico/General",
            "NZ",
            "NZ-CHAT",
            "Navajo",
            "PRC",
            "PST8PDT",
            "Pacific/Apia",
            "Pacific/Auckland",
            "Pacific/Bougainville",
            "Pacific/Chatham",
            "Pacific/Chuuk",
            "Pacific/Easter",
            "Pacific/Efate",
            "Pacific/Enderbury",
            "Pacific/Fakaofo",
            "Pacific/Fiji",
            "Pacific/Funafuti",
            "Pacific/Galapagos",
            "Pacific/Gambier",
            "Pacific/Guadalcanal",
            "Pacific/Guam",
            "Pacific/Honolulu",
            "Pacific/Johnston",
            "Pacific/Kanton",
            "Pacific/Kiritimati",
            "Pacific/Kosrae",
            "Pacific/Kwajalein",
            "Pacific/Majuro",
            "Pacific/Marquesas",
            "Pacific/Midway",
            "Pacific/Nauru",
            "Pacific/Niue",
            "Pacific/Norfolk",
            "Pacific/Noumea",
            "Pacific/Pago_Pago",
            "Pacific/Palau",
            "Pacific/Pitcairn",
            "Pacific/Pohnpei",
            "Pacific/Ponape",
            "Pacific/Port_Moresby",
            "Pacific/Rarotonga",
            "Pacific/Saipan",
            "Pacific/Samoa",
            "Pacific/Tahiti",
            "Pacific/Tarawa",
            "Pacific/Tongatapu",
            "Pacific/Truk",
            "Pacific/Wake",
            "Pacific/Wallis",
            "Pacific/Yap",
            "Poland",
            "Portugal",
            "ROC",
            "ROK",
            "Singapore",
            "Turkey",
            "UCT",
            "US/Alaska",
            "US/Aleutian",
            "US/Arizona",
            "US/Central",
            "US/East-Indiana",
            "US/Eastern",
            "US/Hawaii",
            "US/Indiana-Starke",
            "US/Michigan",
            "US/Mountain",
            "US/Pacific",
            "US/Samoa",
            "UTC",
            "Universal",
            "W-SU",
            "WET",
            "Zulu"
          ],
          "minLength": 1,
          "title": "Timezone",
          "type": "string"
        },
        "cronjob": {
          "description": "A Cronjob object that use for validate and generate datetime.",
          "title": "Cronjob",
          "type": "string"
        }
      },
      "required": [
        "cronjob"
      ],
      "title": "Crontab",
      "type": "object"
    },
    "CrontabValue": {
      "description": "Crontab model using interval-based specification.\n\nAttributes:\n    interval: (Interval)\n        A scheduling interval string ('daily', 'weekly', 'monthly').\n    day: (str, default None)\n        Day specification for weekly/monthly schedules.\n    time: Time of day in 'HH:MM' format.",
      "properties": {
        "extras": {
          "additionalProperties": true,
          "description": "An extras parameters that want to pass to the CronJob field.",
          "title": "Extras",
          "type": "object"
        },
        "timezone": {
          "default": "UTC",
          "description": "A timezone string value that will pass to ZoneInfo.",
          "enum": [
            "Africa/Abidjan",
            "Africa/Accra",
            "Africa/Addis_Ababa",
            "Africa/Algiers",
            "Africa/Asmara",
            "Africa/Asmera",
            "Africa/Bamako",
            "Africa/Bangui",
            "Africa/Banjul",
            "Africa/Bissau",
            "Africa/Blantyre",
            "Africa/Brazzaville",
            "Africa/Bujumbura",
            "Africa/Cairo",
            "Africa/Casablanca",
            "Africa/Ceuta",
            "Africa/Conakry",
            "Africa/Dakar",
            "Africa/Dar_es_Salaam",
            "Africa/Djibouti",
            "Africa/Douala",
            "Africa/El_Aaiun",
            "Africa/Freetown",
            "Africa/Gaborone",
            "Africa/Harare",
            "Africa/Johannesburg",
            "Africa/Juba",
            "Africa/Kampala",
            "Africa/Khartoum",
            "Africa/Kigali",
            "Africa/Kinshasa",
            "Africa/Lagos",
            "Africa/Libreville",
            "Africa/Lome",
            "Africa/Luanda",
            "Africa/Lubumbashi",
            "Africa/Lusaka",
            "Africa/Malabo",
            "Africa/Maputo",
            "Africa/Maseru",
            "Africa/Mbabane",
            "Africa/Mogadishu",
            "Africa/Monrovia",
            "Africa/Nairobi",
            "Africa/Ndjamena",
            "Africa/Niamey",
            "Africa/Nouakchott",
            "Africa/Ouagadougou",
            "Africa/Porto-Novo",
            "Africa/Sao_Tome",
            "Africa/Timbuktu",
            "Africa/Tripoli",
            "Africa/Tunis",
            "Africa/Windhoek",
            "America/Adak",
            "America/Anchorage",
            "America/Anguilla",
            "America/Antigua",
            "America/Araguaina",
            "America/Argentina/Buenos_Aires",
            "America/Argentina/Catamarca",
            "America/Argentina/ComodRivadavia",
            "America/Argentina/Cordoba",
            "America/Argentina/Jujuy",
            "America/Argentina/La_Rioja",
            "America/Argentina/Mendoza",
            "America/Argentina/Rio_Gallegos",
            "America/Argentina/Salta",
            "America/Argentina/San_Juan",
            "America/Argentina/San_Luis",
            "America/Argentina/Tucuman",
            "America/Argentina/Ushuaia",
            "America/Aruba",
            "America/Asuncion",
            "America/Atikokan",
            "America/Atka",
            "America/Bahia",
            "America/Bahia_Banderas",
            "America/Barbados",
            "America/Belem",
            "America/Belize",
            "America/Blanc-Sablon",
            "America/Boa_Vista",
            "America/Bogota",
            "America/Boise",
            "America/Buenos_Aires",
            "America/Cambridge_Bay",
            "America/Campo_Grande",
            "America/Cancun",
            "America/Caracas",
            "America/Catamarca",
            "America/Cayenne",
            "America/Cayman",
            "America/Chicago",
            "America/Chihuahua",
            "America/Ciudad_Juarez",
            "America/Coral_Harbour",
            "America/Cordoba",
            "America/Costa_Rica",
            "America/Coyhaique",
            "America/Creston",
            "America/Cuiaba",
            "America/Curacao",
            "America/Danmarkshavn",
            "America/Dawson",
            "America/Dawson_Creek",
            "America/Denver",
            "America/Detroit",
            "America/Dominica",
            "America/Edmonton",
            "America/Eirunepe",
            "America/El_Salvador",
            "America/Ensenada",
            "America/Fort_Nelson",
            "America/Fort_Wayne",
            "America/Fortaleza",
            "America/Glace_Bay",
            "America/Godthab",
            "America/Goose_Bay",
            "America/Grand_Turk",
            "America/Grenada",
            "America/Guadeloupe",
            "America/Guatemala",
            "America/Guayaquil",
            "America/Guyana",
            "America/Halifax",
            "America/Havana",
            "America/Hermosillo",
            "America/Indiana/Indianapolis",
            "America/Indiana/Knox",
            "America/Indiana/Marengo",
            "America/Indiana/Petersburg",
            "America/Indiana/Tell_City",
            "America/Indiana/Vevay",
            "America/Indiana/Vincennes",
            "America/Indiana/Winamac",
            "America/Indianapolis",
            "America/Inuvik",
            "America/Iqaluit",
            "America/Jamaica",
            "America/Jujuy",
            "America/Juneau",
            "America/Kentucky/Louisville",
            "America/Kentucky/Monticello",
            "America/Knox_IN",
            "America/Kralendijk",
            "America/La_Paz",
            "America/Lima",
            "America/Los_Angeles",
            "America/Louisville",
            "America/Lower_Princes",
            "America/Maceio",
            "America/Managua",
            "America/Manaus",
            "America/Marigot",
            "America/Martinique",
            "America/Matamoros",
            "America/Mazatlan",
            "America/Mendoza",
            "America/Menominee",
            "America/Merida",
            "America/Metlakatla",
            "America/Mexico_City",
            "America/Miquelon",
            "America/Moncton",
            "America/Monterrey",
            "America/Montevideo",
            "America/Montreal",
            "America/Montserrat",
            "America/Nassau",
            "America/New_York",
            "America/Nipigon",
            "America/Nome",
            "America/Noronha",
            "America/North_Dakota/Beulah",
            "America/North_Dakota/Center",
            "America/North_Dakota/New_Salem",
            "America/Nuuk",
            "America/Ojinaga",
            "America/Panama",
            "America/Pangnirtung",
            "America/Paramaribo",
            "America/Phoenix",
            "America/Port-au-Prince",
            "America/Port_of_Spain",
            "America/Porto_Acre",
            "America/Porto_Velho",
            "America/Puerto_Rico",
            "America/Punta_Arenas",
            "America/Rainy_River",
            "America/Rankin_Inlet",
            "America/Recife",
            "America/Regina",
            "America/Resolute",
            "America/Rio_Branco",
            "America/Rosario",
            "America/Santa_Isabel",
            "America/Santarem",
            "America/Santiago",
            "America/Santo_Domingo",
            "America/Sao_Paulo",
            "America/Scoresbysund",
            "America/Shiprock",
            "America/Sitka",
            "America/St_Barthelemy",
            "America/St_Johns",
            "America/St_Kitts",
            "America/St_Lucia",
            "America/St_Thomas",
            "America/St_Vincent",
            "America/Swift_Current",
            "America/Tegucigalpa",
            "America/Thule",
            "America/Thunder_Bay",
            "America/Tijuana",
            "America/Toronto",
            "America/Tortola",
            "America/Vancouver",
            "America/Virgin",
            "America/Whitehorse",
            "America/Winnipeg",
            "America/Yakutat",
            "America/Yellowknife",
            "Antarctica/Casey",
            "Antarctica/Davis",
            "Antarctica/DumontDUrville",
            "Antarctica/Macquarie",
            "Antarctica/Mawson",
            "Antarctica/McMurdo",
            "Antarctica/Palmer",
            "Antarctica/Rothera",
            "Antarctica/South_Pole",
            "Antarctica/Syowa",
            "Antarctica/Troll",
            "Antarctica/Vostok",
            "Arctic/Longyearbyen",
            "Asia/Aden",
            "Asia/Almaty",
            "Asia/Amman",
            "Asia/Anadyr",
            "Asia/Aqtau",
            "Asia/Aqtobe",
            "Asia/Ashgabat",
            "Asia/Ashkhabad",
            "Asia/Atyrau",
            "Asia/Baghdad",
            "Asia/Bahrain",
            "Asia/Baku",
            "Asia/Bangkok",
            "Asia/Barnaul",
            "Asia/Beirut",
            "Asia/Bishkek",
            "Asia/Brunei",
            "Asia/Calcutta",
            "Asia/Chita",
            "Asia/Choibalsan",
            "Asia/Chongqing",
            "Asia/Chungking",
            "Asia/Colombo",
            "Asia/Dacca",
            "Asia/Damascus",
            "Asia/Dhaka",
            "Asia/Dili",
            "Asia/Dubai",
            "Asia/Dushanbe",
            "Asia/Famagusta",
            "Asia/Gaza",
            "Asia/Harbin",
            "Asia/Hebron",
            "Asia/Ho_Chi_Minh",
            "Asia/Hong_Kong",
            "Asia/Hovd",
            "Asia/Irkutsk",
            "Asia/Istanbul",
            "Asia/Jakarta",
            "Asia/Jayapura",
            "Asia/Jerusalem",
            "Asia/Kabul",
            "Asia/Kamchatka",
            "Asia/Karachi",
            "Asia/Kashgar",
            "Asia/Kathmandu",
            "Asia/Katmandu",
            "Asia/Khandyga",
            "Asia/Kolkata",
            "Asia/Krasnoyarsk",
            "Asia/Kuala_Lumpur",
            "Asia/Kuching",
            "Asia/Kuwait",
            "Asia/Macao",
            "Asia/Macau",
            "Asia/Magadan",
            "Asia/Makassar",
            "Asia/Manila",
            "Asia/Muscat",
            "Asia/Nicosia",
            "Asia/Novokuznetsk",
            "Asia/Novosibirsk",
            "Asia/Omsk",
            "Asia/Oral",
            "Asia/Phnom_Penh",
            "Asia/Pontianak",
            "Asia/Pyongyang",
            "Asia/Qatar",
            "Asia/Qostanay",
            "Asia/Qyzylorda",
            "Asia/Rangoon",
            "Asia/Riyadh",
            "Asia/Saigon",
            "Asia/Sakhalin",
            "Asia/Samarkand",
            "Asia/Seoul",
            "Asia/Shanghai",
            "Asia/Singapore",
            "Asia/Srednekolymsk",
            "Asia/Taipei",
            "Asia/Tashkent",
            "Asia/Tbilisi",
            "Asia/Tehran",
            "Asia/Tel_Aviv",
            "Asia/Thimbu",
            "Asia/Thimphu",
            "Asia/Tokyo",
            "Asia/Tomsk",
            "Asia/Ujung_Pandang",
            "Asia/Ulaanbaatar",
            "Asia/Ulan_Bator",
            "Asia/Urumqi",
            "Asia/Ust-Nera",
            "Asia/Vientiane",
            "Asia/Vladivostok",
            "Asia/Yakutsk",
            "Asia/Yangon",
            "Asia/Yekaterinburg",
            "Asia/Yerevan",
            "Atlantic/Azores",
            "Atlantic/Bermuda",
            "Atlantic/Canary",
            "Atlantic/Cape_Verde",
            "Atlantic/Faeroe",
            "Atlantic/Faroe",
            "Atlantic/Jan_Mayen",
            "Atlantic/Madeira",
            "Atlantic/Reykjavik",
            "Atlantic/South_Georgia",
            "Atlantic/St_Helena",
            "Atlantic/Stanley",
            "Australia/ACT",
            "Australia/Adelaide",
            "Australia/Brisbane",
            "Australia/Broken_Hill",
            "Australia/Canberra",
            "Australia/Currie",
            "Australia/Darwin",
            "Australia/Eucla",
            "Australia/Hobart",
            "Australia/LHI",
            "Australia/Lindeman",
            "Australia/Lord_Howe",
            "Australia/Melbourne",
            "Australia/NSW",
            "Australia/North",
            "Australia/Perth",
            "Australia/Queensland",
            "Australia/South",
            "Australia/Sydney",
            "Australia/Tasmania",
            "Australia/Victoria",
            "Australia/West",
            "Australia/Yancowinna",
            "Brazil/Acre",
            "Brazil/DeNoronha",
            "Brazil/East",
            "Brazil/West",
            "CET",
            "CST6CDT",
            "Canada/Atlantic",
            "Canada/Central",
            "Canada/Eastern",
            "Canada/Mountain",
            "Canada/Newfoundland",
            "Canada/Pacific",
            "Canada/Saskatchewan",
            "Canada/Yukon",
            "Chile/Continental",
            "Chile/EasterIsland",
            "Cuba",
            "EET",
            "EST",
            "EST5EDT",
            "Egypt",
            "Eire",
            "Etc/GMT",
            "Etc/GMT+0",
            "Etc/GMT+1",
            "Etc/GMT+10",
            "Etc/GMT+11",
            "Etc/GMT+12",
            "Etc/GMT+2",
            "Etc/GMT+3",
            "Etc/GMT+4",
            "Etc/GMT+5",
            "Etc/GMT+6",
            "Etc/GMT+7",
            "Etc/GMT+8",
            "Etc/GMT+9",
            "Etc/GMT-0",
            "Etc/GMT-1",
            "Etc/GMT-10",
            "Etc/GMT-11",
            "Etc/GMT-12",
            "Etc/GMT-13",
            "Etc/GMT-14",
            "Etc/GMT-2",
            "Etc/GMT-3",
            "Etc/GMT-4",
            "Etc/GMT-5",
            "Etc/GMT-6",
            "Etc/GMT-7",
            "Etc/GMT-8",
            "Etc/GMT-9",
            "Etc/GMT0",
            "Etc/Greenwich",
            "Etc/UCT",
            "Etc/UTC",
            "Etc/Universal",
            "Etc/Zulu",
            "Europe/Amsterdam",
            "Europe/Andorra",
            "Europe/Astrakhan",
            "Europe/Athens",
            "Europe/Belfast",
            "Europe/Belgrade",
            "Europe/Berlin",
            "Europe/Bratislava",
            "Europe/Brussels",
            "Europe/Bucharest",
            "Europe/Budapest",
            "Europe/Busingen",
            "Europe/Chisinau",
            "Europe/Copenhagen",
            "Europe/Dublin",
            "Europe/Gibraltar",
            "Europe/Guernsey",
            "Europe/Helsinki",
            "Europe/Isle_of_Man",
            "Europe/Istanbul",
            "Europe/Jersey",
            "Europe/Kaliningrad",
            "Europe/Kiev",
            "Europe/Kirov",
            "Europe/Kyiv",
            "Europe/Lisbon",
            "Europe/Ljubljana",
            "Europe/London",
            "Europe/Luxembourg",
            "Europe/Madrid",
            "Europe/Malta",
            "Europe/Mariehamn",
            "Europe/Minsk",
            "Europe/Monaco",
            "Europe/Moscow",
            "Europe/Nicosia",
            "Europe/Oslo",
            "Europe/Paris",
            "Europe/Podgorica",
            "Europe/Prague",
            "Europe/Riga",
            "Europe/Rome",
            "Europe/Samara",
            "Europe/San_Marino",
            "Europe/Sarajevo",
            "Europe/Saratov",
            "Europe/Simferopol",
            "Europe/Skopje",
            "Europe/Sofia",
            "Europe/Stockholm",
            "Europe/Tallinn",
            "Europe/Tirane",
            "Europe/Tiraspol",
            "Europe/Ulyanovsk",
            "Europe/Uzhgorod",
            "Europe/Vaduz",
            "Europe/Vatican",
            "Europe/Vienna",
            "Europe/Vilnius",
            "Europe/Volgograd",
            "Europe/Warsaw",
            "Europe/Zagreb",
            "Europe/Zaporozhye",
            "Europe/Zurich",
            "Factory",
            "GB",
            "GB-Eire",
            "GMT",
            "GMT+0",
            "GMT-0",
            "GMT0",
            "Greenwich",
            "HST",
            "Hongkong",
            "Iceland",
            "Indian/Antananarivo",
            "Indian/Chagos",
            "Indian/Christmas",
            "Indian/Cocos",
            "Indian/Comoro",
            "Indian/Kerguelen",
            "Indian/Mahe",
            "Indian/Maldives",
            "Indian/Mauritius",
            "Indian/Mayotte",
            "Indian/Reunion",
            "Iran",
            "Israel",
            "Jamaica",
            "Japan",
            "Kwajalein",
            "Libya",
            "MET",
            "MST",
            "MST7MDT",
            "Mexico/BajaNorte",
            "Mexico/BajaSur",
            "Mexico/General",
            "NZ",
            "NZ-CHAT",
            "Navajo",
            "PRC",
            "PST8PDT",
            "Pacific/Apia",
            "Pacific/Auckland",
            "Pacific/Bougainville",
            "Pacific/Chatham",
            "Pacific/Chuuk",
            "Pacific/Easter",
            "Pacific/Efate",
            "Pacific/Enderbury",
            "Pacific/Fakaofo",
            "Pacific/Fiji",
            "Pacific/Funafuti",
            "Pacific/Galapagos",
            "Pacific/Gambier",
            "Pacific/Guadalcanal",
            "Pacific/Guam",
            "Pacific/Honolulu",
            "Pacific/Johnston",
            "Pacific/Kanton",
            "Pacific/Kiritimati",
            "Pacific/Kosrae",
            "Pacific/Kwajalein",
            "Pacific/Majuro",
            "Pacific/Marquesas",
            "Pacific/Midway",
            "Pacific/Nauru",
            "Pacific/Niue",
            "Pacific/Norfolk",
            "Pacific/Noumea",
            "Pacific/Pago_Pago",
            "Pacific/Palau",
            "Pacific/Pitcairn",
            "Pacific/Pohnpei",
            "Pacific/Ponape",
            "Pacific/Port_Moresby",
            "Pacific/Rarotonga",
            "Pacific/Saipan",
            "Pacific/Samoa",
            "Pacific/Tahiti",
            "Pacific/Tarawa",
            "Pacific/Tongatapu",
            "Pacific/Truk",
            "Pacific/Wake",
            "Pacific/Wallis",
            "Pacific/Yap",
            "Poland",
            "Portugal",
            "ROC",
            "ROK",
            "Singapore",
            "Turkey",
            "UCT",
            "US/Alaska",
            "US/Aleutian",
            "US/Arizona",
            "US/Central",
            "US/East-Indiana",
            "US/Eastern",
            "US/Hawaii",
            "US/Indiana-Starke",
            "US/Michigan",
            "US/Mountain",
            "US/Pacific",
            "US/Samoa",
            "UTC",
            "Universal",
            "W-SU",
            "WET",
            "Zulu"
          ],
          "minLength": 1,
          "title": "Timezone",
          "type": "string"
        },
        "interval": {
          "description": "A scheduling interval string.",
          "enum": [
            "daily",
            "weekly",
            "monthly"
          ],
          "title": "Interval",
          "type": "string"
        },
        "day": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "title": "Day"
        },
        "time": {
          "default": "00:00",
          "description": "A time of day that pass with format 'HH:MM'.",
          "pattern": "\\d{2}:\\d{2}",
          "title": "Time",
          "type": "string"
        }
      },
      "required": [
        "interval"
      ],
      "title": "CrontabValue",
      "type": "object"
    },
    "CrontabYear": {
      "description": "Cron event model with enhanced year-based scheduling.\n\nExtends the base Crontab model to support year-specific scheduling,\nparticularly useful for tools like AWS Glue.\n\nAttributes:\n    cronjob: CronJobYear instance for year-aware schedule validation and generation.",
      "properties": {
        "extras": {
          "additionalProperties": true,
          "description": "An extras parameters that want to pass to the CronJob field.",
          "title": "Extras",
          "type": "object"
        },
        "timezone": {
          "default": "UTC",
          "description": "A timezone string value that will pass to ZoneInfo.",
          "enum": [
            "Africa/Abidjan",
            "Africa/Accra",
            "Africa/Addis_Ababa",
            "Africa/Algiers",
            "Africa/Asmara",
            "Africa/Asmera",
            "Africa/Bamako",
            "Africa/Bangui",
            "Africa/Banjul",
            "Africa/Bissau",
            "Africa/Blantyre",
            "Africa/Brazzaville",
            "Africa/Bujumbura",
            "Africa/Cairo",
            "Africa/Casablanca",
            "Africa/Ceuta",
            "Africa/Conakry",
            "Africa/Dakar",
            "Africa/Dar_es_Salaam",
            "Africa/Djibouti",
            "Africa/Douala",
            "Africa/El_Aaiun",
            "Africa/Freetown",
            "Africa/Gaborone",
            "Africa/Harare",
            "Africa/Johannesburg",
            "Africa/Juba",
            "Africa/Kampala",
            "Africa/Khartoum",
            "Africa/Kigali",
            "Africa/Kinshasa",
            "Africa/Lagos",
            "Africa/Libreville",
            "Africa/Lome",
            "Africa/Luanda",
            "Africa/Lubumbashi",
            "Africa/Lusaka",
            "Africa/Malabo",
            "Africa/Maputo",
            "Africa/Maseru",
            "Africa/Mbabane",
            "Africa/Mogadishu",
            "Africa/Monrovia",
            "Africa/Nairobi",
            "Africa/Ndjamena",
            "Africa/Niamey",
            "Africa/Nouakchott",
            "Africa/Ouagadougou",
            "Africa/Porto-Novo",
            "Africa/Sao_Tome",
            "Africa/Timbuktu",
            "Africa/Tripoli",
            "Africa/Tunis",
            "Africa/Windhoek",
            "America/Adak",
            "America/Anchorage",
            "America/Anguilla",
            "America/Antigua",
            "America/Araguaina",
            "America/Argentina/Buenos_Aires",
            "America/Argentina/Catamarca",
            "America/Argentina/ComodRivadavia",
            "America/Argentina/Cordoba",
            "America/Argentina/Jujuy",
            "America/Argentina/La_Rioja",
            "America/Argentina/Mendoza",
            "America/Argentina/Rio_Gallegos",
            "America/Argentina/Salta",
            "America/Argentina/San_Juan",
            "America/Argentina/San_Luis",
            "America/Argentina/Tucuman",
            "America/Argentina/Ushuaia",
            "America/Aruba",
            "America/Asuncion",
            "America/Atikokan",
            "America/Atka",
            "America/Bahia",
            "America/Bahia_Banderas",
            "America/Barbados",
            "America/Belem",
            "America/Belize",
            "America/Blanc-Sablon",
            "America/Boa_Vista",
            "America/Bogota",
            "America/Boise",
            "America/Buenos_Aires",
            "America/Cambridge_Bay",
            "America/Campo_Grande",
            "America/Cancun",
            "America/Caracas",
            "America/Catamarca",
            "America/Cayenne",
            "America/Cayman",
            "America/Chicago",
            "America/Chihuahua",
            "America/Ciudad_Juarez",
            "America/Coral_Harbour",
            "America/Cordoba",
            "America/Costa_Rica",
            "America/Coyhaique",
            "America/Creston",
            "America/Cuiaba",
            "America/Curacao",
            "America/Danmarkshavn",
            "America/Dawson",
            "America/Dawson_Creek",
            "America/Denver",
            "America/Detroit",
            "America/Dominica",
            "America/Edmonton",
            "America/Eirunepe",
            "America/El_Salvador",
            "America/Ensenada",
            "America/Fort_Nelson",
            "America/Fort_Wayne",
            "America/Fortaleza",
            "America/Glace_Bay",
            "America/Godthab",
            "America/Goose_Bay",
            "America/Grand_Turk",
            "America/Grenada",
            "America/Guadeloupe",
            "America/Guatemala",
            "America/Guayaquil",
            "America/Guyana",
            "America/Halifax",
            "America/Havana",
            "America/Hermosillo",
            "America/Indiana/Indianapolis",
            "America/Indiana/Knox",
            "America/Indiana/Marengo",
            "America/Indiana/Petersburg",
            "America/Indiana/Tell_City",
            "America/Indiana/Vevay",
            "America/Indiana/Vincennes",
            "America/Indiana/Winamac",
            "America/Indianapolis",
            "America/Inuvik",
            "America/Iqaluit",
            "America/Jamaica",
            "America/Jujuy",
            "America/Juneau",
            "America/Kentucky/Louisville",
            "America/Kentucky/Monticello",
            "America/Knox_IN",
            "America/Kralendijk",
            "America/La_Paz",
            "America/Lima",
            "America/Los_Angeles",
            "America/Louisville",
            "America/Lower_Princes",
            "America/Maceio",
            "America/Managua",
            "America/Manaus",
            "America/Marigot",
            "America/Martinique",
            "America/Matamoros",
            "America/Mazatlan",
            "America/Mendoza",
            "America/Menominee",
            "America/Merida",
            "America/Metlakatla",
            "America/Mexico_City",
            "America/Miquelon",
            "America/Moncton",
            "America/Monterrey",
            "America/Montevideo",
            "America/Montreal",
            "America/Montserrat",
            "America/Nassau",
            "America/New_York",
            "America/Nipigon",
            "America/Nome",
            "America/Noronha",
            "America/North_Dakota/Beulah",
            "America/North_Dakota/Center",
            "America/North_Dakota/New_Salem",
            "America/Nuuk",
            "America/Ojinaga",
            "America/Panama",
            "America/Pangnirtung",
            "America/Paramaribo",
            "America/Phoenix",
            "America/Port-au-Prince",
            "America/Port_of_Spain",
            "America/Porto_Acre",
            "America/Porto_Velho",
            "America/Puerto_Rico",
            "America/Punta_Arenas",
            "America/Rainy_River",
            "America/Rankin_Inlet",
            "America/Recife",
            "America/Regina",
            "America/Resolute",
            "America/Rio_Branco",
            "America/Rosario",
            "America/Santa_Isabel",
            "America/Santarem",
            "America/Santiago",
            "America/Santo_Domingo",
            "America/Sao_Paulo",
            "America/Scoresbysund",
            "America/Shiprock",
            "America/Sitka",
            "America/St_Barthelemy",
            "America/St_Johns",
            "America/St_Kitts",
            "America/St_Lucia",
            "America/St_Thomas",
            "America/St_Vincent",
            "America/Swift_Current",
            "America/Tegucigalpa",
            "America/Thule",
            "America/Thunder_Bay",
            "America/Tijuana",
            "America/Toronto",
            "America/Tortola",
            "America/Vancouver",
            "America/Virgin",
            "America/Whitehorse",
            "America/Winnipeg",
            "America/Yakutat",
            "America/Yellowknife",
            "Antarctica/Casey",
            "Antarctica/Davis",
            "Antarctica/DumontDUrville",
            "Antarctica/Macquarie",
            "Antarctica/Mawson",
            "Antarctica/McMurdo",
            "Antarctica/Palmer",
            "Antarctica/Rothera",
            "Antarctica/South_Pole",
            "Antarctica/Syowa",
            "Antarctica/Troll",
            "Antarctica/Vostok",
            "Arctic/Longyearbyen",
            "Asia/Aden",
            "Asia/Almaty",
            "Asia/Amman",
            "Asia/Anadyr",
            "Asia/Aqtau",
            "Asia/Aqtobe",
            "Asia/Ashgabat",
            "Asia/Ashkhabad",
            "Asia/Atyrau",
            "Asia/Baghdad",
            "Asia/Bahrain",
            "Asia/Baku",
            "Asia/Bangkok",
            "Asia/Barnaul",
            "Asia/Beirut",
            "Asia/Bishkek",
            "Asia/Brunei",
            "Asia/Calcutta",
            "Asia/Chita",
            "Asia/Choibalsan",
            "Asia/Chongqing",
            "Asia/Chungking",
            "Asia/Colombo",
            "Asia/Dacca",
            "Asia/Damascus",
            "Asia/Dhaka",
            "Asia/Dili",
            "Asia/Dubai",
            "Asia/Dushanbe",
            "Asia/Famagusta",
            "Asia/Gaza",
            "Asia/Harbin",
            "Asia/Hebron",
            "Asia/Ho_Chi_Minh",
            "Asia/Hong_Kong",
            "Asia/Hovd",
            "Asia/Irkutsk",
            "Asia/Istanbul",
            "Asia/Jakarta",
            "Asia/Jayapura",
            "Asia/Jerusalem",
            "Asia/Kabul",
            "Asia/Kamchatka",
            "Asia/Karachi",
            "Asia/Kashgar",
            "Asia/Kathmandu",
            "Asia/Katmandu",
            "Asia/Khandyga",
            "Asia/Kolkata",
            "Asia/Krasnoyarsk",
            "Asia/Kuala_Lumpur",
            "Asia/Kuching",
            "Asia/Kuwait",
            "Asia/Macao",
            "Asia/Macau",
            "Asia/Magadan",
            "Asia/Makassar",
            "Asia/Manila",
            "Asia/Muscat",
            "Asia/Nicosia",
            "Asia/Novokuznetsk",
            "Asia/Novosibirsk",
            "Asia/Omsk",
            "Asia/Oral",
            "Asia/Phnom_Penh",
            "Asia/Pontianak",
            "Asia/Pyongyang",
            "Asia/Qatar",
            "Asia/Qostanay",
            "Asia/Qyzylorda",
            "Asia/Rangoon",
            "Asia/Riyadh",
            "Asia/Saigon",
            "Asia/Sakhalin",
            "Asia/Samarkand",
            "Asia/Seoul",
            "Asia/Shanghai",
            "Asia/Singapore",
            "Asia/Srednekolymsk",
            "Asia/Taipei",
            "Asia/Tashkent",
            "Asia/Tbilisi",
            "Asia/Tehran",
            "Asia/Tel_Aviv",
            "Asia/Thimbu",
            "Asia/Thimphu",
            "Asia/Tokyo",
            "Asia/Tomsk",
            "Asia/Ujung_Pandang",
            "Asia/Ulaanbaatar",
            "Asia/Ulan_Bator",
            "Asia/Urumqi",
            "Asia/Ust-Nera",
            "Asia/Vientiane",
            "Asia/Vladivostok",
            "Asia/Yakutsk",
            "Asia/Yangon",
            "Asia/Yekaterinburg",
            "Asia/Yerevan",
            "Atlantic/Azores",
            "Atlantic/Bermuda",
            "Atlantic/Canary",
            "Atlantic/Cape_Verde",
            "Atlantic/Faeroe",
            "Atlantic/Faroe",
            "Atlantic/Jan_Mayen",
            "Atlantic/Madeira",
            "Atlantic/Reykjavik",
            "Atlantic/South_Georgia",
            "Atlantic/St_Helena",
            "Atlantic/Stanley",
            "Australia/ACT",
            "Australia/Adelaide",
            "Australia/Brisbane",
            "Australia/Broken_Hill",
            "Australia/Canberra",
            "Australia/Currie",
            "Australia/Darwin",
            "Australia/Eucla",
            "Australia/Hobart",
            "Australia/LHI",
            "Australia/Lindeman",
            "Australia/Lord_Howe",
            "Australia/Melbourne",
            "Australia/NSW",
            "Australia/North",
            "Australia/Perth",
            "Australia/Queensland",
            "Australia/South",
            "Australia/Sydney",
            "Australia/Tasmania",
            "Australia/Victoria",
            "Australia/West",
            "Australia/Yancowinna",
            "Brazil/Acre",
            "Brazil/DeNoronha",
            "Brazil/East",
            "Brazil/West",
            "CET",
            "CST6CDT",
            "Canada/Atlantic",
            "Canada/Central",
            "Canada/Eastern",
            "Canada/Mountain",
            "Canada/Newfoundland",
            "Canada/Pacific",
            "Canada/Saskatchewan",
            "Canada/Yukon",
            "Chile/Continental",
            "Chile/EasterIsland",
            "Cuba",
            "EET",
            "EST",
            "EST5EDT",
            "Egypt",
            "Eire",
            "Etc/GMT",
            "Etc/GMT+0",
            "Etc/GMT+1",
            "Etc/GMT+10",
            "Etc/GMT+11",
            "Etc/GMT+12",
            "Etc/GMT+2",
            "Etc/GMT+3",
            "Etc/GMT+4",
            "Etc/GMT+5",
            "Etc/GMT+6",
            "Etc/GMT+7",
            "Etc/GMT+8",
            "Etc/GMT+9",
            "Etc/GMT-0",
            "Etc/GMT-1",
            "Etc/GMT-10",
            "Etc/GMT-11",
            "Etc/GMT-12",
            "Etc/GMT-13",
            "Etc/GMT-14",
            "Etc/GMT-2",
            "Etc/GMT-3",
            "Etc/GMT-4",
            "Etc/GMT-5",
            "Etc/GMT-6",
            "Etc/GMT-7",
            "Etc/GMT-8",
            "Etc/GMT-9",
            "Etc/GMT0",
            "Etc/Greenwich",
            "Etc/UCT",
            "Etc/UTC",
            "Etc/Universal",
            "Etc/Zulu",
            "Europe/Amsterdam",
            "Europe/Andorra",
            "Europe/Astrakhan",
            "Europe/Athens",
            "Europe/Belfast",
            "Europe/Belgrade",
            "Europe/Berlin",
            "Europe/Bratislava",
            "Europe/Brussels",
            "Europe/Bucharest",
            "Europe/Budapest",
            "Europe/Busingen",
            "Europe/Chisinau",
            "Europe/Copenhagen",
            "Europe/Dublin",
            "Europe/Gibraltar",
            "Europe/Guernsey",
            "Europe/Helsinki",
            "Europe/Isle_of_Man",
            "Europe/Istanbul",
            "Europe/Jersey",
            "Europe/Kaliningrad",
            "Europe/Kiev",
            "Europe/Kirov",
            "Europe/Kyiv",
            "Europe/Lisbon",
            "Europe/Ljubljana",
            "Europe/London",
            "Europe/Luxembourg",
            "Europe/Madrid",
            "Europe/Malta",
            "Europe/Mariehamn",
            "Europe/Minsk",
            "Europe/Monaco",
            "Europe/Moscow",
            "Europe/Nicosia",
            "Europe/Oslo",
            "Europe/Paris",
            "Europe/Podgorica",
            "Europe/Prague",
            "Europe/Riga",
            "Europe/Rome",
            "Europe/Samara",
            "Europe/San_Marino",
            "Europe/Sarajevo",
            "Europe/Saratov",
            "Europe/Simferopol",
            "Europe/Skopje",
            "Europe/Sofia",
            "Europe/Stockholm",
            "Europe/Tallinn",
            "Europe/Tirane",
            "Europe/Tiraspol",
            "Europe/Ulyanovsk",
            "Europe/Uzhgorod",
            "Europe/Vaduz",
            "Europe/Vatican",
            "Europe/Vienna",
            "Europe/Vilnius",
            "Europe/Volgograd",
            "Europe/Warsaw",
            "Europe/Zagreb",
            "Europe/Zaporozhye",
            "Europe/Zurich",
            "Factory",
            "GB",
            "GB-Eire",
            "GMT",
            "GMT+0",
            "GMT-0",
            "GMT0",
            "Greenwich",
            "HST",
            "Hongkong",
            "Iceland",
            "Indian/Antananarivo",
            "Indian/Chagos",
            "Indian/Christmas",
            "Indian/Cocos",
            "Indian/Comoro",
            "Indian/Kerguelen",
            "Indian/Mahe",
            "Indian/Maldives",
            "Indian/Mauritius",
            "Indian/Mayotte",
            "Indian/Reunion",
            "Iran",
            "Israel",
            "Jamaica",
            "Japan",
            "Kwajalein",
            "Libya",
            "MET",
            "MST",
            "MST7MDT",
            "Mexico/BajaNorte",
            "Mexico/BajaSur",
            "Mexico/General",
            "NZ",
            "NZ-CHAT",
            "Navajo",
            "PRC",
            "PST8PDT",
            "Pacific/Apia",
            "Pacific/Auckland",
            "Pacific/Bougainville",
            "Pacific/Chatham",
            "Pacific/Chuuk",
            "Pacific/Easter",
            "Pacific/Efate",
            "Pacific/Enderbury",
            "Pacific/Fakaofo",
            "Pacific/Fiji",
            "Pacific/Funafuti",
            "Pacific/Galapagos",
            "Pacific/Gambier",
            "Pacific/Guadalcanal",
            "Pacific/Guam",
            "Pacific/Honolulu",
            "Pacific/Johnston",
            "Pacific/Kanton",
            "Pacific/Kiritimati",
            "Pacific/Kosrae",
            "Pacific/Kwajalein",
            "Pacific/Majuro",
            "Pacific/Marquesas",
            "Pacific/Midway",
            "Pacific/Nauru",
            "Pacific/Niue",
            "Pacific/Norfolk",
            "Pacific/Noumea",
            "Pacific/Pago_Pago",
            "Pacific/Palau",
            "Pacific/Pitcairn",
            "Pacific/Pohnpei",
            "Pacific/Ponape",
            "Pacific/Port_Moresby",
            "Pacific/Rarotonga",
            "Pacific/Saipan",
            "Pacific/Samoa",
            "Pacific/Tahiti",
            "Pacific/Tarawa",
            "Pacific/Tongatapu",
            "Pacific/Truk",
            "Pacific/Wake",
            "Pacific/Wallis",
            "Pacific/Yap",
            "Poland",
            "Portugal",
            "ROC",
            "ROK",
            "Singapore",
            "Turkey",
            "UCT",
            "US/Alaska",
            "US/Aleutian",
            "US/Arizona",
            "US/Central",
            "US/East-Indiana",
            "US/Eastern",
            "US/Hawaii",
            "US/Indiana-Starke",
            "US/Michigan",
            "US/Mountain",
            "US/Pacific",
            "US/Samoa",
            "UTC",
            "Universal",
            "W-SU",
            "WET",
            "Zulu"
          ],
          "minLength": 1,
          "title": "Timezone",
          "type": "string"
        },
        "cronjob": {
          "description": "A Cronjob object that use for validate and generate datetime.",
          "title": "Cronjob",
          "type": "string"
        }
      },
      "required": [
        "cronjob"
      ],
      "title": "CrontabYear",
      "type": "object"
    },
    "DateParam": {
      "description": "Date parameter model.\n\nThis class provides date parameter validation and processing with support\nfor various input formats including ISO date strings, datetime objects,\nand date objects.",
      "properties": {
        "desc": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "A description of this parameter provide to the workflow model.",
          "title": "Desc"
        },
        "required": {
          "default": false,
          "description": "A require flag for the default-able parameter value.",
          "title": "Required",
          "type": "boolean"
        },
        "type": {
          "const": "date",
          "default": "date",
          "title": "Type",
          "type": "string"
        },
        "default": {
          "type": "string",
          "format": "date",
          "description": "A default date that make from the current date func.",
          "title": "Default"
        }
      },
      "title": "DateParam",
      "type": "object"
    },
    "DatetimeParam": {
      "description": "Datetime parameter model.\n\nThis class provides datetime parameter validation and processing with support\nfor various input formats including ISO datetime strings, datetime objects,\nand date objects. All datetime values are normalized to UTC timezone.",
      "properties": {
        "desc": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "A description of this parameter provide to the workflow model.",
          "title": "Desc"
        },
        "required": {
          "default": false,
          "description": "A require flag for the default-able parameter value.",
          "title": "Required",
          "type": "boolean"
        },
        "type": {
          "const": "datetime",
          "default": "datetime",
          "title": "Type",
          "type": "string"
        },
        "default": {
          "type": "string",
          "format": "date-time",
          "description": "A default datetime that make from the current datetime func.",
          "title": "Default"
        }
      },
      "title": "DatetimeParam",
      "type": "object"
    },
    "DecimalParam": {
      "description": "Decimal parameter.\n\nThis class provides decimal parameter validation and processing with precision\ncontrol for financial calculations and exact decimal arithmetic.",
      "properties": {
        "desc": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "A description of this parameter provide to the workflow model.",
          "title": "Desc"
        },
        "required": {
          "default": false,
          "description": "A require flag for the default-able parameter value.",
          "title": "Required",
          "type": "boolean"
        },
        "type": {
          "const": "decimal",
          "default": "decimal",
          "title": "Type",
          "type": "string"
        },
        "default": {
          "anyOf": [
            {},
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "A default value if parameter does not pass.",
          "title": "Default"
        },
        "precision": {
          "default": 6,
          "title": "Precision",
          "type": "integer"
        }
      },
      "title": "DecimalParam",
      "type": "object"
    },
    "DockerArgs": {
      "properties": {
        "image": {
          "default": "ubuntu-latest",
          "description": "An image that want to run like `ubuntu-22.04`, `windows-latest`, , `ubuntu-24.04-arm`, or `macos-14`",
          "title": "Image",
          "type": "string"
        },
        "env": {
          "additionalProperties": true,
          "title": "Env",
          "type": "object"
        },
        "volume": {
          "additionalProperties": true,
          "title": "Volume",
          "type": "object"
        }
      },
      "title": "DockerArgs",
      "type": "object"
    },
    "DockerStage": {
      "description": "Docker container stage execution that will pull the specific Docker image\nwith custom authentication and run this image by passing environment\nvariables and mounting local volume to this Docker container.\n\n    The volume path that mount to this Docker container will limit. That is\nthis stage does not allow you to mount any path to this container.\n\nData Validate:\n    >>> stage = {\n    ...     \"name\": \"Docker stage execution\",\n    ...     \"image\": \"image-name.pkg.com\",\n    ...     \"env\": {\n    ...         \"ENV\": \"dev\",\n    ...         \"SECRET\": \"${SPECIFIC_SECRET}\",\n    ...     },\n    ...     \"auth\": {\n    ...         \"username\": \"__json_key\",\n    ...         \"password\": \"${GOOGLE_CREDENTIAL_JSON_STRING}\",\n    ...     },\n    ... }",
      "properties": {
        "extras": {
          "additionalProperties": true,
          "description": "An extra parameter that override core config values.",
          "title": "Extras",
          "type": "object"
        },
        "id": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "A stage ID that use to keep execution output or getting by job owner.",
          "title": "Id"
        },
        "name": {
          "description": "A stage name that want to logging when start execution.",
          "title": "Name",
          "type": "string"
        },
        "desc": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "A stage description that use to logging when start execution.",
          "title": "Desc"
        },
        "if": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "boolean"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "A stage condition statement to allow stage executable. This field alise with `if` field.",
          "title": "If"
        },
        "retry": {
          "default": 0,
          "description": "A retry number if stage process got the error exclude skip and cancel exception class.",
          "exclusiveMaximum": 20,
          "minimum": 0,
          "title": "Retry",
          "type": "integer"
        },
        "image": {
          "description": "A Docker image url with tag that want to run.",
          "title": "Image",
          "type": "string"
        },
        "tag": {
          "default": "latest",
          "description": "An Docker image tag.",
          "title": "Tag",
          "type": "string"
        },
        "env": {
          "additionalProperties": true,
          "description": "An environment variable that want pass to Docker container.",
          "title": "Env",
          "type": "object"
        },
        "volume": {
          "additionalProperties": true,
          "description": "A mapping of local and target mounting path.",
          "title": "Volume",
          "type": "object"
        },
        "auth": {
          "additionalProperties": true,
          "description": "An authentication of the Docker registry that use in pulling step.",
          "title": "Auth",
          "type": "object"
        }
      },
      "required": [
        "name",
        "image"
      ],
      "title": "DockerStage",
      "type": "object"
    },
    "Else": {
      "description": "Else model for the Case Stage.",
      "properties": {
        "else": {
          "description": "A list of stage that does not match any case.",
          "items": {
            "anyOf": [
              {
                "$ref": "#/$defs/ForEachStage"
              },
              {
                "$ref": "#/$defs/UntilStage"
              },
              {
                "$ref": "#/$defs/ParallelStage"
              },
              {
                "$ref": "#/$defs/CaseStage"
              },
              {
                "$ref": "#/$defs/TriggerStage"
              },
              {
                "anyOf": [
                  {
                    "$ref": "#/$defs/BashStage"
                  },
                  {
                    "$ref": "#/$defs/CallStage"
                  },
                  {
                    "$ref": "#/$defs/VirtualPyStage"
                  },
                  {
                    "$ref": "#/$defs/PyStage"
                  },
                  {
                    "$ref": "#/$defs/RaiseStage"
                  },
                  {
                    "$ref": "#/$defs/DockerStage"
                  },
                  {
                    "$ref": "#/$defs/TriggerStage"
                  },
                  {
                    "$ref": "#/$defs/EmptyStage"
                  }
                ],
                "description": "An action stage model that allow to use with nested-stage model."
              }
            ],
            "description": "A stage models that already implemented on this package."
          },
          "title": "Else",
          "type": "array"
        }
      },
      "required": [
        "else"
      ],
      "title": "Else",
      "type": "object"
    },
    "EmptyStage": {
      "description": "Empty stage for logging and debugging workflows.\n\nEmptyStage is a utility stage that performs no actual work but provides\nlogging output and optional delays. It's commonly used for:\n    - Debugging workflow execution flow\n    - Adding informational messages to workflows\n    - Creating delays between stages\n    - Testing template parameter resolution\n\nThe stage outputs the echo message to stdout and can optionally sleep\nfor a specified duration, making it useful for workflow timing control\nand debugging scenarios.\n\nExamples:\n    >>> stage = EmptyStage.model_validate({\n    ...     \"id\": \"empty-stage\",\n    ...     \"name\": \"Status Update\",\n    ...     \"echo\": \"Processing completed successfully\",\n    ...     \"sleep\": 1.0,\n    ... })",
      "properties": {
        "extras": {
          "additionalProperties": true,
          "description": "An extra parameter that override core config values.",
          "title": "Extras",
          "type": "object"
        },
        "id": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "A stage ID that use to keep execution output or getting by job owner.",
          "title": "Id"
        },
        "name": {
          "description": "A stage name that want to logging when start execution.",
          "title": "Name",
          "type": "string"
        },
        "desc": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "A stage description that use to logging when start execution.",
          "title": "Desc"
        },
        "if": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "boolean"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "A stage condition statement to allow stage executable. This field alise with `if` field.",
          "title": "If"
        },
        "echo": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "A message that want to display on the stdout during execution. By default, it do not show any message.",
          "title": "Echo"
        },
        "sleep": {
          "default": 0,
          "description": "A duration in second value to sleep after logging. This value should between 0 - 1800 seconds.",
          "exclusiveMaximum": 1800,
          "minimum": 0,
          "title": "Sleep",
          "type": "number"
        }
      },
      "required": [
        "name"
      ],
      "title": "EmptyStage",
      "type": "object"
    },
    "Event": {
      "description": "Event model with comprehensive trigger support.\n\nSupports multiple types of event triggers including cron scheduling,\nfile monitoring, webhooks, database changes, sensor-based triggers,\npolling-based triggers, message queue events, stream processing events,\nbatch processing events, data quality events, API rate limiting events,\ndata lineage events, ML pipeline events, data catalog events,\ninfrastructure events, compliance events, and business events.",
      "properties": {
        "schedule": {
          "description": "A list of Cron schedule.",
          "items": {
            "anyOf": [
              {
                "$ref": "#/$defs/CrontabYear"
              },
              {
                "$ref": "#/$defs/Crontab"
              },
              {
                "$ref": "#/$defs/CrontabValue"
              }
            ],
            "description": "Event model type supporting year-based, standard, and interval-based cron scheduling."
          },
          "title": "Schedule",
          "type": "array"
        },
        "release": {
          "description": "A list of workflow name that want to receive event from releasetrigger.",
          "items": {
            "type": "string"
          },
          "title": "Release",
          "type": "array"
        }
      },
      "title": "Event",
      "type": "object"
    },
    "FloatParam": {
      "description": "Float parameter.\n\nThis class provides float parameter validation and processing with precision\ncontrol for rounding float values to a specified number of decimal places.",
      "properties": {
        "desc": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "A description of this parameter provide to the workflow model.",
          "title": "Desc"
        },
        "required": {
          "default": false,
          "description": "A require flag for the default-able parameter value.",
          "title": "Required",
          "type": "boolean"
        },
        "type": {
          "const": "float",
          "default": "float",
          "title": "Type",
          "type": "string"
        },
        "default": {
          "anyOf": [
            {},
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "A default value if parameter does not pass.",
          "title": "Default"
        },
        "precision": {
          "default": 6,
          "title": "Precision",
          "type": "integer"
        }
      },
      "title": "FloatParam",
      "type": "object"
    },
    "ForEachStage": {
      "description": "For-Each stage executor that execute all stages with each item in the\nforeach list.\n\n    This stage is not the low-level stage model because it runs\nmulti-stages in this stage execution.\n\nExamples:\n    >>> stage = ForEachStage.model_validate({\n    ...     \"id\": \"foreach-stage\",\n    ...     \"name\": \"For-each stage execution\",\n    ...     \"foreach\": [1, 2, 3]\n    ...     \"stages\": [\n    ...         {\n    ...             \"name\": \"Echo stage\",\n    ...             \"echo\": \"Start run with item ${{ item }}\"\n    ...         },\n    ...     ],\n    ... })",
      "properties": {
        "extras": {
          "additionalProperties": true,
          "description": "An extra parameter that override core config values.",
          "title": "Extras",
          "type": "object"
        },
        "id": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "A stage ID that use to keep execution output or getting by job owner.",
          "title": "Id"
        },
        "name": {
          "description": "A stage name that want to logging when start execution.",
          "title": "Name",
          "type": "string"
        },
        "desc": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "A stage description that use to logging when start execution.",
          "title": "Desc"
        },
        "if": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "boolean"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "A stage condition statement to allow stage executable. This field alise with `if` field.",
          "title": "If"
        },
        "foreach": {
          "anyOf": [
            {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            {
              "items": {
                "type": "integer"
              },
              "type": "array"
            },
            {
              "type": "string"
            },
            {
              "additionalProperties": true,
              "type": "object"
            }
          ],
          "description": "A items for passing to stages via ${{ item }} template parameter.",
          "title": "Foreach"
        },
        "stages": {
          "description": "A list of stage that will run with each item in the `foreach` field.",
          "items": {
            "anyOf": [
              {
                "$ref": "#/$defs/ForEachStage"
              },
              {
                "$ref": "#/$defs/UntilStage"
              },
              {
                "$ref": "#/$defs/ParallelStage"
              },
              {
                "$ref": "#/$defs/CaseStage"
              },
              {
                "$ref": "#/$defs/TriggerStage"
              },
              {
                "anyOf": [
                  {
                    "$ref": "#/$defs/BashStage"
                  },
                  {
                    "$ref": "#/$defs/CallStage"
                  },
                  {
                    "$ref": "#/$defs/VirtualPyStage"
                  },
                  {
                    "$ref": "#/$defs/PyStage"
                  },
                  {
                    "$ref": "#/$defs/RaiseStage"
                  },
                  {
                    "$ref": "#/$defs/DockerStage"
                  },
                  {
                    "$ref": "#/$defs/TriggerStage"
                  },
                  {
                    "$ref": "#/$defs/EmptyStage"
                  }
                ],
                "description": "An action stage model that allow to use with nested-stage model."
              }
            ],
            "description": "A stage models that already implemented on this package."
          },
          "title": "Stages",
          "type": "array"
        },
        "concurrent": {
          "default": 1,
          "description": "A concurrent value allow to run each item at the same time. It will be sequential mode if this value equal 1.",
          "exclusiveMaximum": 10,
          "minimum": 1,
          "title": "Concurrent",
          "type": "integer"
        },
        "use_index_as_key": {
          "default": false,
          "description": "A flag for using the loop index as a key instead item value. This flag allow to skip checking duplicate item step.",
          "title": "Use Index As Key",
          "type": "boolean"
        }
      },
      "required": [
        "name",
        "foreach"
      ],
      "title": "ForEachStage",
      "type": "object"
    },
    "GCPBatchArgs": {
      "description": "Google Cloud Batch arguments.",
      "properties": {
        "project_id": {
          "description": "Google Cloud project ID",
          "title": "Project Id",
          "type": "string"
        },
        "region": {
          "description": "Google Cloud region",
          "title": "Region",
          "type": "string"
        },
        "gcs_bucket": {
          "description": "Google Cloud Storage bucket",
          "title": "Gcs Bucket",
          "type": "string"
        },
        "credentials_path": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Path to service account credentials",
          "title": "Credentials Path"
        },
        "machine_type": {
          "default": "e2-standard-4",
          "description": "Machine type",
          "title": "Machine Type",
          "type": "string"
        },
        "max_parallel_tasks": {
          "default": 1,
          "description": "Maximum parallel tasks",
          "title": "Max Parallel Tasks",
          "type": "integer"
        }
      },
      "required": [
        "project_id",
        "region",
        "gcs_bucket"
      ],
      "title": "GCPBatchArgs",
      "type": "object"
    },
    "IntParam": {
      "description": "Integer parameter.\n\nThis class provides integer parameter validation and processing with support\nfor converting various numeric types to integers.",
      "properties": {
        "desc": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "A description of this parameter provide to the workflow model.",
          "title": "Desc"
        },
        "required": {
          "default": false,
          "description": "A require flag for the default-able parameter value.",
          "title": "Required",
          "type": "boolean"
        },
        "type": {
          "const": "int",
          "default": "int",
          "title": "Type",
          "type": "string"
        },
        "default": {
          "anyOf": [
            {},
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "A default value if parameter does not pass.",
          "title": "Default"
        }
      },
      "title": "IntParam",
      "type": "object"
    },
    "Job": {
      "description": "Job execution container for stage orchestration.\n\nThe Job model represents a logical unit of work containing multiple stages\nthat execute sequentially. Jobs support matrix strategies for parameterized\nexecution, dependency management, conditional execution, and multienvironment\ndeployment.\n\nExample:\n    >>> from ddeutil.workflow.stages import EmptyStage, PyStage\n    >>> job = Job(\n    ...     id=\"data-processing\",\n    ...     desc=\"Process daily data files\",\n    ...     runs_on=OnLocal(),\n    ...     stages=[\n    ...         EmptyStage(name=\"Start\", echo=\"Processing started\"),\n    ...         PyStage(name=\"Process\", run=\"process_data()\"),\n    ...         EmptyStage(name=\"Complete\", echo=\"Processing finished\")\n    ...     ],\n    ...     strategy=Strategy(\n    ...         matrix={'env': ['dev', 'prod']},\n    ...         max_parallel=2\n    ...     )\n    ... )",
      "properties": {
        "id": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "A job ID that was set from Workflow model after initialize step. If this model create standalone, it will be None.",
          "title": "Id"
        },
        "desc": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "A job description that can be markdown syntax.",
          "title": "Desc"
        },
        "runs-on": {
          "anyOf": [
            {
              "oneOf": [
                {
                  "$ref": "#/$defs/OnSelfHosted"
                },
                {
                  "$ref": "#/$defs/OnDocker"
                },
                {
                  "$ref": "#/$defs/OnLocal"
                },
                {
                  "$ref": "#/$defs/OnContainer"
                },
                {
                  "$ref": "#/$defs/OnAWSBatch"
                },
                {
                  "$ref": "#/$defs/OnGCPBatch"
                }
              ]
            },
            {
              "const": "local",
              "type": "string"
            }
          ],
          "description": "A target node for this job to use for execution.",
          "title": "Runs-On"
        },
        "if": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "A job condition statement to allow job executable.",
          "title": "If"
        },
        "stages": {
          "description": "A list of Stage model of this job.",
          "items": {
            "anyOf": [
              {
                "$ref": "#/$defs/ForEachStage"
              },
              {
                "$ref": "#/$defs/UntilStage"
              },
              {
                "$ref": "#/$defs/ParallelStage"
              },
              {
                "$ref": "#/$defs/CaseStage"
              },
              {
                "$ref": "#/$defs/TriggerStage"
              },
              {
                "anyOf": [
                  {
                    "$ref": "#/$defs/BashStage"
                  },
                  {
                    "$ref": "#/$defs/CallStage"
                  },
                  {
                    "$ref": "#/$defs/VirtualPyStage"
                  },
                  {
                    "$ref": "#/$defs/PyStage"
                  },
                  {
                    "$ref": "#/$defs/RaiseStage"
                  },
                  {
                    "$ref": "#/$defs/DockerStage"
                  },
                  {
                    "$ref": "#/$defs/TriggerStage"
                  },
                  {
                    "$ref": "#/$defs/EmptyStage"
                  }
                ],
                "description": "An action stage model that allow to use with nested-stage model."
              }
            ],
            "description": "A stage models that already implemented on this package."
          },
          "title": "Stages",
          "type": "array"
        },
        "retry": {
          "default": 0,
          "description": "A retry number if job route execution got the error exclude skip and cancel exception class.",
          "exclusiveMaximum": 20,
          "minimum": 0,
          "title": "Retry",
          "type": "integer"
        },
        "trigger-rule": {
          "$ref": "#/$defs/Rule",
          "default": "all_success",
          "description": "A trigger rule of tracking needed jobs if feature will use when the `raise_error` did not set from job and stage executions."
        },
        "needs": {
          "description": "A list of the job that want to run before this job model.",
          "items": {
            "type": "string"
          },
          "title": "Needs",
          "type": "array"
        },
        "strategy": {
          "$ref": "#/$defs/Strategy",
          "description": "A strategy matrix that want to generate."
        },
        "extras": {
          "additionalProperties": true,
          "description": "An extra override config values.",
          "title": "Extras",
          "type": "object"
        }
      },
      "title": "Job",
      "type": "object"
    },
    "MapParam": {
      "description": "Map parameter.\n\nThis class provides dictionary/mapping parameter validation and processing\nwith support for converting string representations to dictionaries.",
      "properties": {
        "desc": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "A description of this parameter provide to the workflow model.",
          "title": "Desc"
        },
        "required": {
          "default": false,
          "description": "A require flag for the default-able parameter value.",
          "title": "Required",
          "type": "boolean"
        },
        "type": {
          "const": "map",
          "default": "map",
          "title": "Type",
          "type": "string"
        },
        "default": {
          "type": "object",
          "additionalProperties": true,
          "description": "A default dict that make from the dict built-in func.",
          "title": "Default"
        }
      },
      "title": "MapParam",
      "type": "object"
    },
    "Match": {
      "description": "Match model for the Case Stage.",
      "properties": {
        "case": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "integer"
            }
          ],
          "description": "A match case.",
          "title": "Case"
        },
        "stages": {
          "description": "A list of stage to execution for this case.",
          "items": {
            "anyOf": [
              {
                "$ref": "#/$defs/ForEachStage"
              },
              {
                "$ref": "#/$defs/UntilStage"
              },
              {
                "$ref": "#/$defs/ParallelStage"
              },
              {
                "$ref": "#/$defs/CaseStage"
              },
              {
                "$ref": "#/$defs/TriggerStage"
              },
              {
                "anyOf": [
                  {
                    "$ref": "#/$defs/BashStage"
                  },
                  {
                    "$ref": "#/$defs/CallStage"
                  },
                  {
                    "$ref": "#/$defs/VirtualPyStage"
                  },
                  {
                    "$ref": "#/$defs/PyStage"
                  },
                  {
                    "$ref": "#/$defs/RaiseStage"
                  },
                  {
                    "$ref": "#/$defs/DockerStage"
                  },
                  {
                    "$ref": "#/$defs/TriggerStage"
                  },
                  {
                    "$ref": "#/$defs/EmptyStage"
                  }
                ],
                "description": "An action stage model that allow to use with nested-stage model."
              }
            ],
            "description": "A stage models that already implemented on this package."
          },
          "title": "Stages",
          "type": "array"
        }
      },
      "required": [
        "case",
        "stages"
      ],
      "title": "Match",
      "type": "object"
    },
    "OnAWSBatch": {
      "description": "Runs-on AWS Batch.",
      "properties": {
        "type": {
          "$ref": "#/$defs/RunsOn",
          "default": "aws_batch"
        },
        "with": {
          "$ref": "#/$defs/AWSBatchArgs"
        }
      },
      "required": [
        "with"
      ],
      "title": "OnAWSBatch",
      "type": "object"
    },
    "OnContainer": {
      "description": "Runs-on Container.",
      "properties": {
        "type": {
          "$ref": "#/$defs/RunsOn",
          "default": "container"
        },
        "with": {
          "$ref": "#/$defs/ContainerArgs"
        }
      },
      "title": "OnContainer",
      "type": "object"
    },
    "OnDocker": {
      "description": "Runs-on Docker container.",
      "properties": {
        "type": {
          "$ref": "#/$defs/RunsOn",
          "default": "docker"
        },
        "with": {
          "$ref": "#/$defs/DockerArgs"
        }
      },
      "title": "OnDocker",
      "type": "object"
    },
    "OnGCPBatch": {
      "description": "Runs-on Google Cloud Batch.",
      "properties": {
        "type": {
          "$ref": "#/$defs/RunsOn",
          "default": "gcp_batch"
        },
        "with": {
          "$ref": "#/$defs/GCPBatchArgs"
        }
      },
      "required": [
        "with"
      ],
      "title": "OnGCPBatch",
      "type": "object"
    },
    "OnLocal": {
      "description": "Runs-on local.",
      "properties": {
        "type": {
          "$ref": "#/$defs/RunsOn",
          "default": "local"
        },
        "with": {
          "additionalProperties": true,
          "description": "An argument that pass to the runs-on execution function. This args will override by this child-model with specific args model.",
          "title": "With",
          "type": "object"
        }
      },
      "title": "OnLocal",
      "type": "object"
    },
    "OnSelfHosted": {
      "description": "Runs-on self-hosted.",
      "properties": {
        "type": {
          "$ref": "#/$defs/RunsOn",
          "default": "self_hosted"
        },
        "with": {
          "$ref": "#/$defs/SelfHostedArgs"
        }
      },
      "required": [
        "with"
      ],
      "title": "OnSelfHosted",
      "type": "object"
    },
    "ParallelStage": {
      "description": "Parallel stage executor that execute branch stages with multithreading.\nThis stage let you set the fix branches for running child stage inside it on\nmultithread pool.\n\n    This stage is not the low-level stage model because it runs multi-stages\nin this stage execution.\n\nExamples:\n    >>> stage = ParallelStage.model_validate({\n    ...     \"id\": \"parallel-stage\",\n    ...     \"name\": \"Parallel stage execution.\",\n    ...     \"parallel\": {\n    ...         \"branch01\": [\n    ...             {\n    ...                 \"name\": \"Echo first stage\",\n    ...                 \"echo\": \"Start run with branch 1\",\n    ...                 \"sleep\": 3,\n    ...             },\n    ...             {\n    ...                 \"name\": \"Echo second stage\",\n    ...                 \"echo\": \"Start run with branch 1\",\n    ...             },\n    ...         ],\n    ...         \"branch02\": [\n    ...             {\n    ...                 \"name\": \"Echo first stage\",\n    ...                 \"echo\": \"Start run with branch 2\",\n    ...                 \"sleep\": 1,\n    ...             },\n    ...         ],\n    ...     }\n    ... })",
      "properties": {
        "extras": {
          "additionalProperties": true,
          "description": "An extra parameter that override core config values.",
          "title": "Extras",
          "type": "object"
        },
        "id": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "A stage ID that use to keep execution output or getting by job owner.",
          "title": "Id"
        },
        "name": {
          "description": "A stage name that want to logging when start execution.",
          "title": "Name",
          "type": "string"
        },
        "desc": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "A stage description that use to logging when start execution.",
          "title": "Desc"
        },
        "if": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "boolean"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "A stage condition statement to allow stage executable. This field alise with `if` field.",
          "title": "If"
        },
        "parallel": {
          "additionalProperties": {
            "items": {
              "anyOf": [
                {
                  "$ref": "#/$defs/ForEachStage"
                },
                {
                  "$ref": "#/$defs/UntilStage"
                },
                {
                  "$ref": "#/$defs/ParallelStage"
                },
                {
                  "$ref": "#/$defs/CaseStage"
                },
                {
                  "$ref": "#/$defs/TriggerStage"
                },
                {
                  "anyOf": [
                    {
                      "$ref": "#/$defs/BashStage"
                    },
                    {
                      "$ref": "#/$defs/CallStage"
                    },
                    {
                      "$ref": "#/$defs/VirtualPyStage"
                    },
                    {
                      "$ref": "#/$defs/PyStage"
                    },
                    {
                      "$ref": "#/$defs/RaiseStage"
                    },
                    {
                      "$ref": "#/$defs/DockerStage"
                    },
                    {
                      "$ref": "#/$defs/TriggerStage"
                    },
                    {
                      "$ref": "#/$defs/EmptyStage"
                    }
                  ],
                  "description": "An action stage model that allow to use with nested-stage model."
                }
              ],
              "description": "A stage models that already implemented on this package."
            },
            "type": "array"
          },
          "description": "A mapping of branch name and its stages.",
          "title": "Parallel",
          "type": "object"
        },
        "max-workers": {
          "anyOf": [
            {
              "type": "integer"
            },
            {
              "type": "string"
            }
          ],
          "default": 2,
          "description": "The maximum multi-thread pool worker size for execution parallel. This value should be gather or equal than 1, and less than 20.",
          "title": "Max-Workers"
        }
      },
      "required": [
        "name",
        "parallel"
      ],
      "title": "ParallelStage",
      "type": "object"
    },
    "PyStage": {
      "description": "Python stage that running the Python statement with the current globals\nand passing an input additional variables via `exec` built-in function.\n\n    This stage allow you to use any Python object that exists on the globals\nsuch as import your installed package.\n\nWarning:\n\n    The exec build-in function is very dangerous. So, it should use the `re`\nmodule to validate exec-string before running or exclude the `os` package\nfrom the current globals variable.\n\nExamples:\n    >>> stage = PyStage.model_validate({\n    ...     \"id\": \"py-stage\",\n    ...     \"name\": \"Python stage execution\",\n    ...     \"run\": 'print(f\"Hello {VARIABLE}\")',\n    ...     \"vars\": {\n    ...         \"VARIABLE\": \"WORLD\",\n    ...     },\n    ... })",
      "properties": {
        "extras": {
          "additionalProperties": true,
          "description": "An extra parameter that override core config values.",
          "title": "Extras",
          "type": "object"
        },
        "id": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "A stage ID that use to keep execution output or getting by job owner.",
          "title": "Id"
        },
        "name": {
          "description": "A stage name that want to logging when start execution.",
          "title": "Name",
          "type": "string"
        },
        "desc": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "A stage description that use to logging when start execution.",
          "title": "Desc"
        },
        "if": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "boolean"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "A stage condition statement to allow stage executable. This field alise with `if` field.",
          "title": "If"
        },
        "retry": {
          "default": 0,
          "description": "A retry number if stage process got the error exclude skip and cancel exception class.",
          "exclusiveMaximum": 20,
          "minimum": 0,
          "title": "Retry",
          "type": "integer"
        },
        "run": {
          "description": "A Python string statement that want to run with `exec`.",
          "title": "Run",
          "type": "string"
        },
        "vars": {
          "additionalProperties": true,
          "description": "A variable mapping that want to pass to globals parameter in the `exec` func.",
          "title": "Vars",
          "type": "object"
        }
      },
      "required": [
        "name",
        "run"
      ],
      "title": "PyStage",
      "type": "object"
    },
    "RaiseStage": {
      "description": "Raise error stage executor that raise `StageError` that use a message\nfield for making error message before raise.\n\nExamples:\n    >>> stage = RaiseStage.model_validate({\n    ...     \"id\": \"raise-stage\",\n    ...     \"name\": \"Raise stage\",\n    ...     \"raise\": \"raise this stage\",\n    ... })",
      "properties": {
        "extras": {
          "additionalProperties": true,
          "description": "An extra parameter that override core config values.",
          "title": "Extras",
          "type": "object"
        },
        "id": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "A stage ID that use to keep execution output or getting by job owner.",
          "title": "Id"
        },
        "name": {
          "description": "A stage name that want to logging when start execution.",
          "title": "Name",
          "type": "string"
        },
        "desc": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "A stage description that use to logging when start execution.",
          "title": "Desc"
        },
        "if": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "boolean"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "A stage condition statement to allow stage executable. This field alise with `if` field.",
          "title": "If"
        },
        "raise": {
          "description": "An error message that want to raise with `StageError` class",
          "title": "Raise",
          "type": "string"
        }
      },
      "required": [
        "name",
        "raise"
      ],
      "title": "RaiseStage",
      "type": "object"
    },
    "Rule": {
      "description": "Rule enum object for assign trigger option.",
      "enum": [
        "all_success",
        "all_failed",
        "all_done",
        "one_failed",
        "one_success",
        "none_failed",
        "none_skipped"
      ],
      "title": "Rule",
      "type": "string"
    },
    "RunsOn": {
      "description": "Runs-On enum object.",
      "enum": [
        "local",
        "self_hosted",
        "azure_batch",
        "aws_batch",
        "gcp_batch",
        "cloud_batch",
        "docker",
        "container"
      ],
      "title": "RunsOn",
      "type": "string"
    },
    "SelfHostedArgs": {
      "description": "Self-Hosted arguments.",
      "properties": {
        "host": {
          "description": "A host URL of the target self-hosted.",
          "title": "Host",
          "type": "string"
        },
        "token": {
          "description": "An API or Access token.",
          "format": "password",
          "title": "Token",
          "type": "string",
          "writeOnly": true
        }
      },
      "required": [
        "host",
        "token"
      ],
      "title": "SelfHostedArgs",
      "type": "object"
    },
    "StrParam": {
      "description": "String parameter.\n\nThis class provides string parameter validation and processing with support\nfor converting various input types to strings.",
      "properties": {
        "desc": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "A description of this parameter provide to the workflow model.",
          "title": "Desc"
        },
        "required": {
          "default": false,
          "description": "A require flag for the default-able parameter value.",
          "title": "Required",
          "type": "boolean"
        },
        "type": {
          "const": "str",
          "default": "str",
          "title": "Type",
          "type": "string"
        },
        "default": {
          "anyOf": [
            {},
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "A default value if parameter does not pass.",
          "title": "Default"
        }
      },
      "title": "StrParam",
      "type": "object"
    },
    "Strategy": {
      "description": "Matrix strategy model for parameterized job execution.\n\nThe Strategy model generates combinations of matrix values to enable\nparallel execution of jobs with different parameter sets. It supports\ncross-product generation, inclusion of specific combinations, and\nexclusion of unwanted combinations.\n\nThis model can be used independently or as part of job configuration\nto create multiple execution contexts from a single job definition.\n\nMatrix Combination Logic:\n    [1, 2, 3] \u00d7 [a, b] \u2192 [1a], [1b], [2a], [2b], [3a], [3b]\n\nAttributes:\n    fail_fast (bool): Cancel remaining executions on first failure\n    max_parallel (int): Maximum concurrent executions (1-9)\n    matrix (dict): Base matrix values for cross-product generation\n    include (list): Additional specific combinations to include\n    exclude (list): Specific combinations to exclude from results\n\nExample:\n    ```python\n    strategy = Strategy(\n        max_parallel=2,\n        fail_fast=True,\n        matrix={\n            'python_version': ['3.9', '3.10', '3.11'],\n            'os': ['ubuntu', 'windows']\n        },\n        include=[{'python_version': '3.12', 'os': 'ubuntu'}],\n        exclude=[{'python_version': '3.9', 'os': 'windows'}]\n    )\n\n    combinations = strategy.make()  # Returns list of parameter dicts\n    ```",
      "properties": {
        "fail-fast": {
          "default": false,
          "description": "A fail-fast flag that use to cancel strategy execution when it has some execution was failed.",
          "title": "Fail-Fast",
          "type": "boolean"
        },
        "max-parallel": {
          "anyOf": [
            {
              "type": "integer"
            },
            {
              "type": "string"
            }
          ],
          "default": 1,
          "description": "The maximum number of executor thread pool that want to run parallel. This value should gather than 0 and less than 10.",
          "title": "Max-Parallel"
        },
        "matrix": {
          "additionalProperties": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "items": {
                  "type": "integer"
                },
                "type": "array"
              }
            ]
          },
          "description": "A matrix values that want to cross product to possible strategies.",
          "title": "Matrix",
          "type": "object"
        },
        "include": {
          "description": "A list of additional matrix that want to adds-in.",
          "items": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "type": "object"
          },
          "title": "Include",
          "type": "array"
        },
        "exclude": {
          "description": "A list of exclude matrix that want to filter-out.",
          "items": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "type": "object"
          },
          "title": "Exclude",
          "type": "array"
        }
      },
      "title": "Strategy",
      "type": "object"
    },
    "TriggerStage": {
      "description": "Trigger workflow executor stage that run an input trigger Workflow\nexecute method. This is the stage that allow you to create the reusable\nWorkflow template with dynamic parameters.\n\n    This stage does not allow to pass the workflow model directly to the\ntrigger field. A trigger workflow name should exist on the config path only.\n\nExamples:\n    >>> stage = TriggerStage.model_validate({\n    ...     \"id\": \"trigger-stage\",\n    ...     \"name\": \"Trigger workflow stage execution\",\n    ...     \"trigger\": 'workflow-name-for-loader',\n    ...     \"params\": {\"run-date\": \"2024-08-01\", \"source\": \"src\"},\n    ... })",
      "properties": {
        "extras": {
          "additionalProperties": true,
          "description": "An extra parameter that override core config values.",
          "title": "Extras",
          "type": "object"
        },
        "id": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "A stage ID that use to keep execution output or getting by job owner.",
          "title": "Id"
        },
        "name": {
          "description": "A stage name that want to logging when start execution.",
          "title": "Name",
          "type": "string"
        },
        "desc": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "A stage description that use to logging when start execution.",
          "title": "Desc"
        },
        "if": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "boolean"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "A stage condition statement to allow stage executable. This field alise with `if` field.",
          "title": "If"
        },
        "retry": {
          "default": 0,
          "description": "A retry number if stage process got the error exclude skip and cancel exception class.",
          "exclusiveMaximum": 20,
          "minimum": 0,
          "title": "Retry",
          "type": "integer"
        },
        "trigger": {
          "description": "A trigger workflow name. This workflow name should exist on the config path because it will load by the `load_conf` method.",
          "title": "Trigger",
          "type": "string"
        },
        "params": {
          "additionalProperties": true,
          "description": "A parameter that will pass to workflow execution method.",
          "title": "Params",
          "type": "object"
        }
      },
      "required": [
        "name",
        "trigger"
      ],
      "title": "TriggerStage",
      "type": "object"
    },
    "UntilStage": {
      "description": "Until stage executor that will run stages in each loop until it valid\nwith stop loop condition.\n\n    This stage is not the low-level stage model because it runs\nmulti-stages in this stage execution.\n\nExamples:\n    >>> stage = UntilStage.model_validate({\n    ...     \"id\": \"until-stage\",\n    ...     \"name\": \"Until stage execution\",\n    ...     \"item\": 1,\n    ...     \"until\": \"${{ item }} > 3\"\n    ...     \"stages\": [\n    ...         {\n    ...             \"name\": \"Start increase item value.\",\n    ...             \"run\": (\n    ...                 \"item = ${{ item }}\\n\"\n    ...                 \"item += 1\\n\"\n    ...             )\n    ...         },\n    ...     ],\n    ... })",
      "properties": {
        "extras": {
          "additionalProperties": true,
          "description": "An extra parameter that override core config values.",
          "title": "Extras",
          "type": "object"
        },
        "id": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "A stage ID that use to keep execution output or getting by job owner.",
          "title": "Id"
        },
        "name": {
          "description": "A stage name that want to logging when start execution.",
          "title": "Name",
          "type": "string"
        },
        "desc": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "A stage description that use to logging when start execution.",
          "title": "Desc"
        },
        "if": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "boolean"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "A stage condition statement to allow stage executable. This field alise with `if` field.",
          "title": "If"
        },
        "item": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "integer"
            },
            {
              "type": "boolean"
            }
          ],
          "default": 0,
          "description": "An initial value that can be any value in str, int, or bool type.",
          "title": "Item"
        },
        "until": {
          "description": "A until condition for stop the while loop.",
          "title": "Until",
          "type": "string"
        },
        "stages": {
          "description": "A list of stage that will run with each item in until loop.",
          "items": {
            "anyOf": [
              {
                "$ref": "#/$defs/BashStage"
              },
              {
                "$ref": "#/$defs/CallStage"
              },
              {
                "$ref": "#/$defs/PyStage"
              },
              {
                "$ref": "#/$defs/VirtualPyStage"
              },
              {
                "$ref": "#/$defs/RaiseStage"
              },
              {
                "$ref": "#/$defs/DockerStage"
              },
              {
                "$ref": "#/$defs/TriggerStage"
              },
              {
                "$ref": "#/$defs/EmptyStage"
              },
              {
                "$ref": "#/$defs/CaseStage"
              },
              {
                "$ref": "#/$defs/ForEachStage"
              },
              {
                "$ref": "#/$defs/UntilStage"
              }
            ],
            "description": "A nested-stage allow list that able to use on the NestedStage model."
          },
          "title": "Stages",
          "type": "array"
        },
        "max-loop": {
          "default": 10,
          "description": "The maximum value of loop for this until stage. This value should be gather or equal than 1, and less than 100.",
          "exclusiveMaximum": 100,
          "minimum": 1,
          "title": "Max-Loop",
          "type": "integer"
        }
      },
      "required": [
        "name",
        "until"
      ],
      "title": "UntilStage",
      "type": "object"
    },
    "VirtualPyStage": {
      "description": "Virtual Python stage executor that run Python statement on the dependent\nPython virtual environment via the `uv` package.",
      "properties": {
        "extras": {
          "additionalProperties": true,
          "description": "An extra parameter that override core config values.",
          "title": "Extras",
          "type": "object"
        },
        "id": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "A stage ID that use to keep execution output or getting by job owner.",
          "title": "Id"
        },
        "name": {
          "description": "A stage name that want to logging when start execution.",
          "title": "Name",
          "type": "string"
        },
        "desc": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "A stage description that use to logging when start execution.",
          "title": "Desc"
        },
        "if": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "boolean"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "A stage condition statement to allow stage executable. This field alise with `if` field.",
          "title": "If"
        },
        "retry": {
          "default": 0,
          "description": "A retry number if stage process got the error exclude skip and cancel exception class.",
          "exclusiveMaximum": 20,
          "minimum": 0,
          "title": "Retry",
          "type": "integer"
        },
        "run": {
          "description": "A Python string statement that want to run with `exec`.",
          "title": "Run",
          "type": "string"
        },
        "vars": {
          "additionalProperties": true,
          "description": "A variable mapping that want to pass to globals parameter in the `exec` func.",
          "title": "Vars",
          "type": "object"
        },
        "version": {
          "default": "3.9",
          "description": "A Python version that want to run. It will use supported version of this package by default, 3.9.",
          "title": "Version",
          "type": "string"
        },
        "deps": {
          "description": "list of Python dependency that want to install before execution stage.",
          "items": {
            "type": "string"
          },
          "title": "Deps",
          "type": "array"
        }
      },
      "required": [
        "name",
        "run",
        "deps"
      ],
      "title": "VirtualPyStage",
      "type": "object"
    },
    "WorkflowSchema": {
      "description": "Override workflow model fields for generate JSON schema file.",
      "properties": {
        "extras": {
          "additionalProperties": true,
          "description": "An extra parameters that want to override config values.",
          "title": "Extras",
          "type": "object"
        },
        "name": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "A workflow name.",
          "title": "Name"
        },
        "type": {
          "const": "Workflow",
          "description": "A type of workflow template that should be `Workflow`.",
          "title": "Type",
          "type": "string"
        },
        "desc": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "A workflow description that can be string of markdown content.",
          "title": "Desc"
        },
        "params": {
          "anyOf": [
            {
              "additionalProperties": {
                "description": "A parameter models that use for validate and receive on the workflow execution.",
                "discriminator": {
                  "mapping": {
                    "array": "#/$defs/ArrayParam",
                    "choice": "#/$defs/ChoiceParam",
                    "date": "#/$defs/DateParam",
                    "datetime": "#/$defs/DatetimeParam",
                    "decimal": "#/$defs/DecimalParam",
                    "float": "#/$defs/FloatParam",
                    "int": "#/$defs/IntParam",
                    "map": "#/$defs/MapParam",
                    "str": "#/$defs/StrParam"
                  },
                  "propertyName": "type"
                },
                "oneOf": [
                  {
                    "$ref": "#/$defs/MapParam"
                  },
                  {
                    "$ref": "#/$defs/ArrayParam"
                  },
                  {
                    "$ref": "#/$defs/ChoiceParam"
                  },
                  {
                    "$ref": "#/$defs/DatetimeParam"
                  },
                  {
                    "$ref": "#/$defs/DateParam"
                  },
                  {
                    "$ref": "#/$defs/FloatParam"
                  },
                  {
                    "$ref": "#/$defs/DecimalParam"
                  },
                  {
                    "$ref": "#/$defs/IntParam"
                  },
                  {
                    "$ref": "#/$defs/StrParam"
                  }
                ]
              },
              "type": "object"
            },
            {
              "additionalProperties": {
                "type": "string"
              },
              "type": "object"
            }
          ],
          "description": "A parameters that need to use on this workflow.",
          "title": "Params"
        },
        "on": {
          "$ref": "#/$defs/Event",
          "description": "An events for this workflow."
        },
        "jobs": {
          "additionalProperties": {
            "$ref": "#/$defs/Job"
          },
          "description": "A mapping of job ID and job model that already loaded.",
          "title": "Jobs",
          "type": "object"
        },
        "tags": {
          "description": "A list of tag that use for simple grouping workflow.",
          "items": {
            "type": "string"
          },
          "title": "Tags",
          "type": "array"
        },
        "created_at": {
          "description": "A created datetime of this workflow template when loading from file.",
          "format": "date-time",
          "title": "Created At",
          "type": "string"
        },
        "updated_dt": {
          "description": "A updated datetime of this workflow template when loading from file.",
          "format": "date-time",
          "title": "Updated Dt",
          "type": "string"
        }
      },
      "required": [
        "type"
      ],
      "title": "WorkflowSchema",
      "type": "object"
    }
  },
  "additionalProperties": {
    "$ref": "#/$defs/WorkflowSchema"
  },
  "type": "object"
}
